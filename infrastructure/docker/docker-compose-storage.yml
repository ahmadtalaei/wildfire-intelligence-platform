# CAL FIRE Wildfire Intelligence Platform - Storage Stack
# Docker Compose configuration for on-premises storage tier

version: '3.8'

networks:
  wildfire-storage:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
    driver: local
  postgres-backup:
    driver: local
  minio-data-1:
    driver: local
  minio-data-2:
    driver: local
  minio-data-3:
    driver: local
  minio-data-4:
    driver: local
  redis-data:
    driver: local
  influxdb-data:
    driver: local

services:
  # PostgreSQL Primary (Hot Tier - Structured Data)
  wildfire-postgres:
    image: postgis/postgis:15-3.4
    container_name: wildfire-postgres
    hostname: wildfire-postgres
    restart: always
    environment:
      POSTGRES_DB: wildfire_db
      POSTGRES_USER: wildfire_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
      # Performance tuning
      POSTGRES_SHARED_BUFFERS: 8GB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 24GB
      POSTGRES_WORK_MEM: 256MB
      POSTGRES_MAINTENANCE_WORK_MEM: 2GB
      POSTGRES_MAX_CONNECTIONS: 200
      # Replication
      POSTGRES_WAL_LEVEL: replica
      POSTGRES_MAX_WAL_SENDERS: 10
      POSTGRES_MAX_REPLICATION_SLOTS: 10
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - postgres-backup:/backups
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "5432:5432"
    networks:
      wildfire-storage:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U wildfire_user -d wildfire_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

  # PostgreSQL Read Replica (High Availability)
  wildfire-postgres-replica:
    image: postgis/postgis:15-3.4
    container_name: wildfire-postgres-replica
    hostname: wildfire-postgres-replica
    restart: always
    environment:
      POSTGRES_DB: wildfire_db
      POSTGRES_USER: wildfire_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PRIMARY_HOST: wildfire-postgres
      POSTGRES_PRIMARY_PORT: 5432
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${REPLICATION_PASSWORD}
    ports:
      - "5433:5432"
    networks:
      wildfire-storage:
        ipv4_address: 172.20.0.11
    depends_on:
      - wildfire-postgres

  # MinIO Node 1 (Distributed Object Storage)
  minio-1:
    image: quay.io/minio/minio:RELEASE.2023-10-25T06-33-25Z
    container_name: minio-1
    hostname: minio-1
    restart: always
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_STORAGE_CLASS_STANDARD: "EC:2"
      MINIO_PROMETHEUS_AUTH_TYPE: "public"
      MINIO_HEAL_MAX_IO: "1000MiB"
      MINIO_COMPRESS_ENABLE: "off"
    command: server http://minio-{1...4}/data --console-address ":9001"
    volumes:
      - minio-data-1:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      wildfire-storage:
        ipv4_address: 172.20.0.20
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  minio-2:
    image: quay.io/minio/minio:RELEASE.2023-10-25T06-33-25Z
    container_name: minio-2
    hostname: minio-2
    restart: always
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_STORAGE_CLASS_STANDARD: "EC:2"
      MINIO_PROMETHEUS_AUTH_TYPE: "public"
    command: server http://minio-{1...4}/data --console-address ":9001"
    volumes:
      - minio-data-2:/data
    networks:
      wildfire-storage:
        ipv4_address: 172.20.0.21

  minio-3:
    image: quay.io/minio/minio:RELEASE.2023-10-25T06-33-25Z
    container_name: minio-3
    hostname: minio-3
    restart: always
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_STORAGE_CLASS_STANDARD: "EC:2"
      MINIO_PROMETHEUS_AUTH_TYPE: "public"
    command: server http://minio-{1...4}/data --console-address ":9001"
    volumes:
      - minio-data-3:/data
    networks:
      wildfire-storage:
        ipv4_address: 172.20.0.22

  minio-4:
    image: quay.io/minio/minio:RELEASE.2023-10-25T06-33-25Z
    container_name: minio-4
    hostname: minio-4
    restart: always
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_STORAGE_CLASS_STANDARD: "EC:2"
      MINIO_PROMETHEUS_AUTH_TYPE: "public"
    command: server http://minio-{1...4}/data --console-address ":9001"
    volumes:
      - minio-data-4:/data
    networks:
      wildfire-storage:
        ipv4_address: 172.20.0.23

  # Redis (In-Memory Cache for Hot Data)
  wildfire-redis:
    image: redis:7.2.3-alpine
    container_name: wildfire-redis
    hostname: wildfire-redis
    restart: always
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 4gb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      wildfire-storage:
        ipv4_address: 172.20.0.30
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # InfluxDB (Time-Series Data for Weather/Sensors)
  wildfire-influxdb:
    image: influxdb:2.7.3-alpine
    container_name: wildfire-influxdb
    hostname: wildfire-influxdb
    restart: always
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_ADMIN_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: calfire
      DOCKER_INFLUXDB_INIT_BUCKET: wildfire_timeseries
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_ADMIN_TOKEN}
    volumes:
      - influxdb-data:/var/lib/influxdb2
    ports:
      - "8086:8086"
    networks:
      wildfire-storage:
        ipv4_address: 172.20.0.40
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # pgAdmin (PostgreSQL Management UI)
  wildfire-pgadmin:
    image: dpage/pgadmin4:8.0
    container_name: wildfire-pgadmin
    hostname: wildfire-pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@calfire.ca.gov
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'True'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    volumes:
      - ./pgadmin/servers.json:/pgadmin4/servers.json:ro
    ports:
      - "5050:80"
    networks:
      wildfire-storage:
        ipv4_address: 172.20.0.50
    depends_on:
      - wildfire-postgres

  # MinIO Client (for bucket initialization)
  minio-client:
    image: minio/mc:latest
    container_name: minio-client
    depends_on:
      - minio-1
      - minio-2
      - minio-3
      - minio-4
    networks:
      - wildfire-storage
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      mc alias set wildfire http://minio-1:9000 ${MINIO_ROOT_USER:-minioadmin} ${MINIO_ROOT_PASSWORD};
      mc mb wildfire/wildfire-hot-tier --ignore-existing;
      mc mb wildfire/wildfire-backup --ignore-existing;
      mc mb wildfire/wildfire-temp --ignore-existing;
      mc version enable wildfire/wildfire-hot-tier;
      mc version enable wildfire/wildfire-backup;
      mc ilm add wildfire/wildfire-temp --expiry-days 7;
      mc admin policy create wildfire wildfire-ingestion-writeonly /policies/ingestion-writeonly.json;
      mc admin policy create wildfire wildfire-analyst-readonly /policies/analyst-readonly.json;
      echo 'MinIO buckets and policies configured successfully';
      exit 0;
      "
    volumes:
      - ./minio/policies:/policies:ro

  # Backup Service (PostgreSQL + MinIO backups to S3)
  backup-service:
    image: alpine:3.18
    container_name: backup-service
    restart: always
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: us-west-2
      POSTGRES_HOST: wildfire-postgres
      POSTGRES_DB: wildfire_db
      POSTGRES_USER: wildfire_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      S3_BACKUP_BUCKET: wildfire-backup-us-west-2
    volumes:
      - postgres-backup:/backups
      - ./backup/backup.sh:/usr/local/bin/backup.sh:ro
    networks:
      - wildfire-storage
    depends_on:
      - wildfire-postgres
      - minio-1
    command: >
      /bin/sh -c "
      apk add --no-cache postgresql-client aws-cli dcron;
      chmod +x /usr/local/bin/backup.sh;
      echo '0 2 * * * /usr/local/bin/backup.sh' | crontab -;
      crond -f -l 2;
      "

  # Prometheus Exporter for PostgreSQL
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: postgres-exporter
    restart: always
    environment:
      DATA_SOURCE_NAME: "postgresql://wildfire_user:${POSTGRES_PASSWORD}@wildfire-postgres:5432/wildfire_db?sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - wildfire-storage
    depends_on:
      - wildfire-postgres

  # Prometheus Exporter for Redis
  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0-alpine
    container_name: redis-exporter
    restart: always
    environment:
      REDIS_ADDR: "redis://wildfire-redis:6379"
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "9121:9121"
    networks:
      - wildfire-storage
    depends_on:
      - wildfire-redis
