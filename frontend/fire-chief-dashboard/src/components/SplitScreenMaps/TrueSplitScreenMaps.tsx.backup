import React, { useState, useEffect, useRef } from 'react';
import { Box, Typography, IconButton, Alert } from '@mui/material';
import { Refresh } from '@mui/icons-material';

interface TrueSplitScreenMapsProps {
  lastRefresh?: Date;
}

// Fire data from NASA FIRMS
interface FireData {
  id: string;
  latitude: number;
  longitude: number;
  brightness: number;
  confidence: number;
  frp: number;
  satellite: 'MODIS' | 'VIIRS';
  acquisitionTime: string;
}

const TrueSplitScreenMaps: React.FC<TrueSplitScreenMapsProps> = ({ lastRefresh }) => {
  const [fireData, setFireData] = useState<FireData[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const fireMapRef = useRef<HTMLDivElement>(null);
  const leafletMapRef = useRef<any>(null);

  // NASA FIRMS API key
  const NASA_API_KEY = 'a1e7b03d16c8570e1bd3c17f54e7cd8d';

  // Fetch live fire data from NASA FIRMS
  const fetchNationwideFireData = async () => {
    setLoading(true);
    setError(null);

    try {
      console.log('üõ∞Ô∏è Fetching nationwide fire data from NASA FIRMS...');

      const today = new Date();
      const dateStr = today.toISOString().split('T')[0];

      // Fetch nationwide USA fire data
      const viirsUrl = `https://firms.modaps.eosdis.nasa.gov/api/country/csv/${NASA_API_KEY}/VIIRS_SNPP_NRT/USA/1/${dateStr}`;
      const modisUrl = `https://firms.modaps.eosdis.nasa.gov/api/country/csv/${NASA_API_KEY}/MODIS_NRT/USA/1/${dateStr}`;

      const [viirsResponse, modisResponse] = await Promise.all([
        fetch(viirsUrl).catch(() => null),
        fetch(modisUrl).catch(() => null)
      ]);

      let allFires: FireData[] = [];

      // Process VIIRS data
      if (viirsResponse && viirsResponse.ok) {
        const viirsText = await viirsResponse.text();
        if (!viirsText.includes('No data')) {
          const viirsData = parseFireCSV(viirsText, 'VIIRS');
          allFires = [...allFires, ...viirsData];
        }
      }

      // Process MODIS data
      if (modisResponse && modisResponse.ok) {
        const modisText = await modisResponse.text();
        if (!modisText.includes('No data')) {
          const modisData = parseFireCSV(modisText, 'MODIS');
          allFires = [...allFires, ...modisData];
        }
      }

      // If no real data, use demo data
      if (allFires.length === 0) {
        allFires = generateDemoFireData();
      }

      // Filter high confidence fires and limit to 50 for performance
      const filteredFires = allFires
        .filter(fire => fire.confidence >= 60)
        .slice(0, 50);

      setFireData(filteredFires);
      console.log(`‚úÖ Loaded ${filteredFires.length} nationwide fires`);

    } catch (err) {
      console.error('‚ùå Error fetching fire data:', err);
      setError('Failed to load fire data');
      setFireData(generateDemoFireData());
    } finally {
      setLoading(false);
    }
  };

  // Parse CSV fire data
  const parseFireCSV = (csvText: string, satellite: 'VIIRS' | 'MODIS'): FireData[] => {
    const lines = csvText.trim().split('\n');
    if (lines.length < 2) return [];

    const headers = lines[0].split(',');
    const fires: FireData[] = [];

    for (let i = 1; i < lines.length; i++) {
      const values = lines[i].split(',');
      if (values.length < headers.length) continue;

      try {
        const fire: FireData = {
          id: `${satellite}-${i}-${Date.now()}`,
          latitude: parseFloat(values[headers.indexOf('latitude')]),
          longitude: parseFloat(values[headers.indexOf('longitude')]),
          brightness: parseFloat(values[headers.indexOf('brightness')]),
          confidence: parseFloat(values[headers.indexOf('confidence')]),
          frp: parseFloat(values[headers.indexOf('frp')] || '0'),
          satellite: satellite,
          acquisitionTime: `${values[headers.indexOf('acq_date')]}T${values[headers.indexOf('acq_time')]}`
        };

        if (!isNaN(fire.latitude) && !isNaN(fire.longitude)) {
          fires.push(fire);
        }
      } catch (e) {
        continue;
      }
    }

    return fires;
  };

  // Generate demo fire data for testing
  const generateDemoFireData = (): FireData[] => {
    const locations = [
      { lat: 34.0522, lng: -118.2437, name: 'Los Angeles' },
      { lat: 37.7749, lng: -122.4194, name: 'San Francisco' },
      { lat: 36.7783, lng: -119.4179, name: 'Central Valley' },
      { lat: 40.7128, lng: -74.0060, name: 'New York' },
      { lat: 39.9526, lng: -75.1652, name: 'Philadelphia' },
      { lat: 41.8781, lng: -87.6298, name: 'Chicago' },
      { lat: 29.7604, lng: -95.3698, name: 'Houston' },
      { lat: 33.4484, lng: -112.0740, name: 'Phoenix' },
      { lat: 39.7392, lng: -104.9903, name: 'Denver' },
      { lat: 47.6062, lng: -122.3321, name: 'Seattle' }
    ];

    return locations.map((loc, i) => ({
      id: `DEMO-${i}`,
      latitude: loc.lat + (Math.random() - 0.5) * 0.5,
      longitude: loc.lng + (Math.random() - 0.5) * 0.5,
      brightness: 280 + Math.random() * 100,
      confidence: 70 + Math.random() * 30,
      frp: 20 + Math.random() * 80,
      satellite: Math.random() > 0.5 ? 'VIIRS' : 'MODIS',
      acquisitionTime: new Date(Date.now() - Math.random() * 3600000).toISOString()
    }));
  };

  // Initialize fire map with Leaflet
  useEffect(() => {
    if (!fireMapRef.current) return;

    const loadLeaflet = async () => {
      // Load Leaflet CSS
      if (!document.querySelector('link[href*="leaflet.css"]')) {
        const css = document.createElement('link');
        css.rel = 'stylesheet';
        css.href = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.css';
        document.head.appendChild(css);
      }

      // Load Leaflet JS
      if (!window.L) {
        const script = document.createElement('script');
        script.src = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js';
        script.onload = () => initializeFireMap();
        document.head.appendChild(script);
      } else {
        initializeFireMap();
      }
    };

    loadLeaflet();
  }, []);

  // Initialize the fire map
  const initializeFireMap = () => {
    if (!window.L || !fireMapRef.current || leafletMapRef.current) return;

    try {
      const map = window.L.map(fireMapRef.current, {
        center: [39.8283, -98.5795], // USA center
        zoom: 4,
        zoomControl: true
      });

      // Add map tiles
      window.L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
        attribution: 'Tiles ¬© Esri'
      }).addTo(map);

      leafletMapRef.current = map;
      console.log('üó∫Ô∏è Fire map initialized');
    } catch (err) {
      console.error('Map initialization error:', err);
    }
  };

  // Add fire markers to map
  useEffect(() => {
    if (!leafletMapRef.current || !window.L || fireData.length === 0) return;

    const map = leafletMapRef.current;

    // Clear existing markers
    map.eachLayer((layer: any) => {
      if (layer.options && layer.options.className === 'fire-marker') {
        map.removeLayer(layer);
      }
    });

    // Add fire markers
    fireData.forEach(fire => {
      const intensity = fire.frp > 60 ? 'Extreme' : fire.frp > 30 ? 'High' : fire.frp > 15 ? 'Moderate' : 'Low';
      const size = Math.max(8, Math.min(24, fire.frp / 3));

      const fireIcon = window.L.divIcon({
        className: 'fire-marker',
        html: `<div style="
          width: ${size}px;
          height: ${size}px;
          background: radial-gradient(circle, #FF4500 0%, #FF0000 70%, #8B0000 100%);
          border-radius: 50%;
          border: 2px solid white;
          box-shadow: 0 0 10px rgba(255, 69, 0, 0.8);
          display: flex;
          align-items: center;
          justify-content: center;
          color: white;
          font-size: 10px;
          font-weight: bold;
        ">üî•</div>`,
        iconSize: [size, size],
        iconAnchor: [size/2, size/2]
      });

      window.L.marker([fire.latitude, fire.longitude], { icon: fireIcon, className: 'fire-marker' })
        .addTo(map)
        .bindPopup(`
          <div style="font-family: Arial; min-width: 200px;">
            <h3 style="color: #FF4500; margin: 0 0 10px 0;">üõ∞Ô∏è ${fire.satellite} Fire Detection</h3>
            <div><strong>Location:</strong> ${fire.latitude.toFixed(4)}¬∞, ${fire.longitude.toFixed(4)}¬∞</div>
            <div><strong>Confidence:</strong> ${fire.confidence}%</div>
            <div><strong>Fire Power:</strong> ${fire.frp.toFixed(1)} MW</div>
            <div><strong>Brightness:</strong> ${fire.brightness.toFixed(1)}K</div>
            <div><strong>Intensity:</strong> ${intensity}</div>
            <div><strong>Time:</strong> ${new Date(fire.acquisitionTime).toLocaleString()}</div>
          </div>
        `);
    });

    // Fit bounds to show all fires (with proper validation)
    if (fireData.length > 0) {
      try {
        const validCoords = fireData
          .filter(fire =>
            !isNaN(fire.latitude) && !isNaN(fire.longitude) &&
            fire.latitude >= -85 && fire.latitude <= 85 &&
            fire.longitude >= -180 && fire.longitude <= 180
          )
          .map(fire => [fire.latitude, fire.longitude]);

        if (validCoords.length > 0) {
          const bounds = window.L.latLngBounds(validCoords);
          if (bounds.isValid()) {
            map.fitBounds(bounds, { padding: [20, 20] });
          } else {
            // Default to USA view if bounds are invalid
            map.setView([39.8283, -98.5795], 4);
          }
        } else {
          map.setView([39.8283, -98.5795], 4);
        }
      } catch (err) {
        console.warn('Error fitting bounds:', err);
        map.setView([39.8283, -98.5795], 4);
      }
    }
  }, [fireData]);

  // Fetch data on mount and refresh
  useEffect(() => {
    fetchNationwideFireData();
  }, []);

  useEffect(() => {
    if (lastRefresh) {
      fetchNationwideFireData();
    }
  }, [lastRefresh]);

  return (
    <Box sx={{ height: '100%', width: '100%', display: 'flex', overflow: 'hidden' }}>
      {/* LEFT MAP: Windy.com Weather (Worldwide, No Fire Data) */}
      <Box sx={{
        width: '50%',
        height: '100%',
        borderRight: '2px solid #333',
        position: 'relative',
        overflow: 'hidden'
      }}>
        {/* Windy.com Worldwide Weather Iframe */}
        <iframe
          src="https://embed.windy.com/embed2.html?lat=20&lon=0&zoom=2&level=surface&overlay=wind&product=gfs&menu=&message=&marker=off&calendar=now&pressure=&type=map&location=coordinates&detail=on&metricWind=mph&metricTemp=¬∞F&radarRange=-1&autoplay=1"
          width="100%"
          height="100%"
          frameBorder="0"
          style={{ border: 'none' }}
          title="Windy Worldwide Weather Map"
        />

        {/* Weather Status Overlay */}
        <Box sx={{
          position: 'absolute',
          bottom: 16,
          left: 16,
          background: 'rgba(33, 150, 243, 0.9)',
          color: 'white',
          padding: '8px 12px',
          borderRadius: 2,
          zIndex: 1000
        }}>
          <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
            üåç WORLDWIDE WEATHER
          </Typography>
          <Typography variant="caption" sx={{ display: 'block' }}>
            No Fire Data ‚Ä¢ Weather Only
          </Typography>
        </Box>
      </Box>

      {/* RIGHT MAP: Fire Data Only (Nationwide) */}
      <Box sx={{
        width: '50%',
        height: '100%',
        position: 'relative',
        overflow: 'hidden'
      }}>
        {/* Fire Map Container */}
        <div
          ref={fireMapRef}
          style={{
            width: '100%',
            height: '100%',
            background: '#f5f5f5'
          }}
        />

        {/* Fire Data Controls */}
        <Box sx={{
          position: 'absolute',
          top: 16,
          right: 16,
          zIndex: 1000
        }}>
          <IconButton
            onClick={fetchNationwideFireData}
            disabled={loading}
            sx={{
              background: 'rgba(211, 47, 47, 0.9)',
              color: 'white',
              '&:hover': { background: 'rgba(211, 47, 47, 1)' }
            }}
          >
            <Refresh />
          </IconButton>
        </Box>

        {/* Fire Status Overlay */}
        <Box sx={{
          position: 'absolute',
          bottom: 16,
          right: 16,
          background: 'rgba(211, 47, 47, 0.9)',
          color: 'white',
          padding: '8px 12px',
          borderRadius: 2,
          zIndex: 1000
        }}>
          <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
            üõ∞Ô∏è NATIONWIDE FIRE DATA
          </Typography>
          <Typography variant="caption" sx={{ display: 'block' }}>
            {loading ? 'Loading...' : `${fireData.length} Active Fires`}
          </Typography>
          <Typography variant="caption" sx={{ display: 'block', fontSize: '10px' }}>
            NASA FIRMS ‚Ä¢ VIIRS/MODIS
          </Typography>
        </Box>

        {/* Error Alert */}
        {error && (
          <Alert
            severity="warning"
            sx={{
              position: 'absolute',
              top: 16,
              left: 16,
              zIndex: 1000,
              maxWidth: '300px'
            }}
          >
            {error}
          </Alert>
        )}
      </Box>
    </Box>
  );
};

export default TrueSplitScreenMaps;