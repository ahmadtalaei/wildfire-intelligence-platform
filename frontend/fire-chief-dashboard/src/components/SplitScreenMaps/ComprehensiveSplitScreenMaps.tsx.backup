import React, { useState, useEffect, useRef } from 'react';
import { Box, Typography, IconButton, Alert, Card, Switch, FormControlLabel, Collapse, Chip, Badge } from '@mui/material';
import {
  Refresh,
  ExpandMore,
  ExpandLess,
  LocalFireDepartment,
  Flight,
  WaterDrop,
  LocalHospital,
  Radio,
  Home,
  Route,
  Landscape,
  Science,
  Thermostat,
  Air,
  Opacity,
  Cloud,
  FlashOn,
  Visibility,
  VisibilityOff
} from '@mui/icons-material';

interface ComprehensiveSplitScreenMapsProps {
  lastRefresh?: Date;
}

// Fire data from NASA FIRMS
interface FireData {
  id: string;
  latitude: number;
  longitude: number;
  brightness: number;
  confidence: number;
  frp: number;
  satellite: 'MODIS' | 'VIIRS';
  acquisitionTime: string;
  daynight: 'D' | 'N';
  type: number;
  acq_date: string;
  acq_time: string;
}

interface OperationalOverlay {
  id: string;
  type: 'helicopter_landing' | 'water_source' | 'emergency_service' | 'communication_tower' |
        'wildland_urban_interface' | 'evacuation_route' | 'fuel_analysis' | 'weather_station' |
        'fire_hazard_zone';
  name: string;
  latitude: number;
  longitude: number;
  status: 'operational' | 'threatened' | 'offline';
  priority: 'low' | 'medium' | 'high' | 'critical';
  capacity?: number;
  details?: string;
}

declare global {
  interface Window {
    L: any;
  }
}

const ComprehensiveSplitScreenMaps: React.FC<ComprehensiveSplitScreenMapsProps> = ({ lastRefresh }) => {
  const [fireData, setFireData] = useState<FireData[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const fireMapRef = useRef<HTMLDivElement>(null);
  const leafletMapRef = useRef<any>(null);
  const [showFireControls, setShowFireControls] = useState(false);
  const [showWeatherControls, setShowWeatherControls] = useState(false);
  const [windyLoaded, setWindyLoaded] = useState(false);
  const [iframeKey, setIframeKey] = useState(0);

  // Layer visibility states
  const [selectedLayers, setSelectedLayers] = useState({
    activeFires: true,
    helicopterLanding: true,
    waterSources: true,
    emergencyServices: true,
    communicationTowers: true,
    wildlandUrbanInterface: true,
    evacuationRoutes: true,
    fuelAnalysis: true,
    weatherStations: true,
    fireHazardZones: true
  });

  // Weather layer states
  const [weatherLayers, setWeatherLayers] = useState({
    wind: true,
    temperature: false,
    humidity: false,
    precipitation: false,
    pressure: false,
    cloudCover: false,
    lightning: false,
    cape: false
  });

  // NASA FIRMS API key
  const NASA_API_KEY = 'a1e7b03d16c8570e1bd3c17f54e7cd8d';

  // Comprehensive operational data
  const operationalData: OperationalOverlay[] = [
    // Helicopter Landing Zones
    {
      id: 'heli-1', type: 'helicopter_landing', name: 'LAX Emergency Helipad',
      latitude: 33.9425, longitude: -118.4081, status: 'operational', priority: 'critical', capacity: 4
    },
    {
      id: 'heli-2', type: 'helicopter_landing', name: 'Griffith Observatory Helispot',
      latitude: 34.1184, longitude: -118.3004, status: 'operational', priority: 'high', capacity: 2
    },
    {
      id: 'heli-3', type: 'helicopter_landing', name: 'Mount Wilson Helipad',
      latitude: 34.2256, longitude: -118.0606, status: 'threatened', priority: 'high', capacity: 3
    },
    {
      id: 'heli-4', type: 'helicopter_landing', name: 'Castaic Lake Helibase',
      latitude: 34.4889, longitude: -118.6226, status: 'operational', priority: 'critical', capacity: 6
    },
    {
      id: 'heli-5', type: 'helicopter_landing', name: 'Angeles Forest Helispot Alpha',
      latitude: 34.3567, longitude: -118.1234, status: 'operational', priority: 'high', capacity: 2
    },

    // Water Sources
    {
      id: 'water-1', type: 'water_source', name: 'Hansen Dam Recreation Area',
      latitude: 34.2584, longitude: -118.4108, status: 'operational', priority: 'critical', capacity: 50000
    },
    {
      id: 'water-2', type: 'water_source', name: 'Castaic Lake',
      latitude: 34.4889, longitude: -118.6226, status: 'operational', priority: 'critical', capacity: 325000
    },
    {
      id: 'water-3', type: 'water_source', name: 'Lake Balboa',
      latitude: 34.2014, longitude: -118.5018, status: 'operational', priority: 'high', capacity: 15000
    },
    {
      id: 'water-4', type: 'water_source', name: 'Sepulveda Dam Basin',
      latitude: 34.1681, longitude: -118.4745, status: 'operational', priority: 'medium', capacity: 25000
    },
    {
      id: 'water-5', type: 'water_source', name: 'Big Tujunga Reservoir',
      latitude: 34.3089, longitude: -118.2876, status: 'operational', priority: 'high', capacity: 8000
    },

    // Emergency Services
    {
      id: 'emergency-1', type: 'emergency_service', name: 'UCLA Medical Center',
      latitude: 34.0522, longitude: -118.4448, status: 'operational', priority: 'critical'
    },
    {
      id: 'emergency-2', type: 'emergency_service', name: 'LA County Fire Station 73',
      latitude: 34.2695, longitude: -118.4523, status: 'operational', priority: 'critical'
    },
    {
      id: 'emergency-3', type: 'emergency_service', name: 'Burbank Police Department',
      latitude: 34.1808, longitude: -118.3258, status: 'operational', priority: 'high'
    },
    {
      id: 'emergency-4', type: 'emergency_service', name: 'Glendale Fire Department',
      latitude: 34.1425, longitude: -118.2551, status: 'operational', priority: 'high'
    },
    {
      id: 'emergency-5', type: 'emergency_service', name: 'LA County Sheriff Station',
      latitude: 34.2089, longitude: -118.4398, status: 'operational', priority: 'high'
    },

    // Communication Towers
    {
      id: 'comm-1', type: 'communication_tower', name: 'Mount Wilson Communications',
      latitude: 34.2256, longitude: -118.0606, status: 'operational', priority: 'critical'
    },
    {
      id: 'comm-2', type: 'communication_tower', name: 'Verdugo Peak Repeater',
      latitude: 34.2089, longitude: -118.2567, status: 'operational', priority: 'high'
    },
    {
      id: 'comm-3', type: 'communication_tower', name: 'Calabasas Peak Tower',
      latitude: 34.1369, longitude: -118.6398, status: 'operational', priority: 'medium'
    },

    // Weather Stations
    {
      id: 'weather-1', type: 'weather_station', name: 'Angeles Crest RAWS',
      latitude: 34.3567, longitude: -118.1234, status: 'operational', priority: 'high'
    },
    {
      id: 'weather-2', type: 'weather_station', name: 'Sylmar RAWS Station',
      latitude: 34.3089, longitude: -118.4398, status: 'operational', priority: 'high'
    },
    {
      id: 'weather-3', type: 'weather_station', name: 'Malibu Creek RAWS',
      latitude: 34.0969, longitude: -118.7314, status: 'operational', priority: 'medium'
    },

    // Fuel Analysis Stations
    {
      id: 'fuel-1', type: 'fuel_analysis', name: 'Angeles Forest Fuel Monitoring Alpha',
      latitude: 34.3156, longitude: -118.1234, status: 'operational', priority: 'medium'
    },
    {
      id: 'fuel-2', type: 'fuel_analysis', name: 'Tujunga Wash Fuel Station',
      latitude: 34.2756, longitude: -118.2845, status: 'operational', priority: 'medium'
    },
    {
      id: 'fuel-3', type: 'fuel_analysis', name: 'Santa Monica Mountains Fuel Monitor',
      latitude: 34.0736, longitude: -118.6681, status: 'operational', priority: 'medium'
    }
  ];

  // Fetch live fire data from NASA FIRMS
  const fetchNationwideFireData = async () => {
    setLoading(true);
    setError(null);

    try {
      console.log('🛰️ Fetching comprehensive fire data from NASA FIRMS...');

      const today = new Date();
      const dateStr = today.toISOString().split('T')[0];

      // Fetch nationwide USA fire data
      const viirsUrl = `https://firms.modaps.eosdis.nasa.gov/api/country/csv/${NASA_API_KEY}/VIIRS_SNPP_NRT/USA/1/${dateStr}`;
      const modisUrl = `https://firms.modaps.eosdis.nasa.gov/api/country/csv/${NASA_API_KEY}/MODIS_NRT/USA/1/${dateStr}`;

      const [viirsResponse, modisResponse] = await Promise.all([
        fetch(viirsUrl).catch(() => null),
        fetch(modisUrl).catch(() => null)
      ]);

      let allFires: FireData[] = [];

      // Process VIIRS data
      if (viirsResponse && viirsResponse.ok) {
        const viirsText = await viirsResponse.text();
        if (!viirsText.includes('No data')) {
          const viirsData = parseFireCSV(viirsText, 'VIIRS');
          allFires = [...allFires, ...viirsData];
        }
      }

      // Process MODIS data
      if (modisResponse && modisResponse.ok) {
        const modisText = await modisResponse.text();
        if (!modisText.includes('No data')) {
          const modisData = parseFireCSV(modisText, 'MODIS');
          allFires = [...allFires, ...modisData];
        }
      }

      // If no real data, use comprehensive demo data
      if (allFires.length === 0) {
        allFires = generateComprehensiveFireData();
      }

      // Filter high confidence fires and limit to 50 for performance
      const filteredFires = allFires
        .filter(fire => fire.confidence >= 60)
        .slice(0, 50);

      setFireData(filteredFires);
      console.log(`✅ Loaded ${filteredFires.length} nationwide fires`);

    } catch (err) {
      console.error('❌ Error fetching fire data:', err);
      setError('Failed to load fire data');
      setFireData(generateComprehensiveFireData());
    } finally {
      setLoading(false);
    }
  };

  // Parse CSV fire data with comprehensive fields
  const parseFireCSV = (csvText: string, satellite: 'VIIRS' | 'MODIS'): FireData[] => {
    const lines = csvText.trim().split('\n');
    if (lines.length < 2) return [];

    const headers = lines[0].split(',').map(h => h.trim());
    const fires: FireData[] = [];

    for (let i = 1; i < lines.length; i++) {
      const values = lines[i].split(',').map(v => v.trim());
      if (values.length < headers.length) continue;

      try {
        const fire: FireData = {
          id: `${satellite}-${i}-${Date.now()}`,
          latitude: parseFloat(values[headers.indexOf('latitude')]),
          longitude: parseFloat(values[headers.indexOf('longitude')]),
          brightness: parseFloat(values[headers.indexOf('brightness')]),
          confidence: parseFloat(values[headers.indexOf('confidence')]),
          frp: parseFloat(values[headers.indexOf('frp')] || '0'),
          satellite: satellite,
          acquisitionTime: `${values[headers.indexOf('acq_date')]}T${values[headers.indexOf('acq_time')]}`,
          daynight: values[headers.indexOf('daynight')] as 'D' | 'N',
          type: parseInt(values[headers.indexOf('type')] || '0'),
          acq_date: values[headers.indexOf('acq_date')],
          acq_time: values[headers.indexOf('acq_time')]
        };

        if (!isNaN(fire.latitude) && !isNaN(fire.longitude) &&
            fire.latitude >= -85 && fire.latitude <= 85 &&
            fire.longitude >= -180 && fire.longitude <= 180) {
          fires.push(fire);
        }
      } catch (e) {
        continue;
      }
    }

    return fires;
  };

  // Generate comprehensive demo fire data
  const generateComprehensiveFireData = (): FireData[] => {
    const locations = [
      { lat: 34.0522, lng: -118.2437, name: 'Los Angeles Metro' },
      { lat: 37.7749, lng: -122.4194, name: 'San Francisco Bay' },
      { lat: 36.7783, lng: -119.4179, name: 'Central Valley' },
      { lat: 40.7128, lng: -74.0060, name: 'New York City' },
      { lat: 39.9526, lng: -75.1652, name: 'Philadelphia' },
      { lat: 41.8781, lng: -87.6298, name: 'Chicago' },
      { lat: 29.7604, lng: -95.3698, name: 'Houston' },
      { lat: 33.4484, lng: -112.0740, name: 'Phoenix' },
      { lat: 39.7392, lng: -104.9903, name: 'Denver' },
      { lat: 47.6062, lng: -122.3321, name: 'Seattle' },
      { lat: 34.3089, lng: -118.4398, name: 'Angeles Forest' },
      { lat: 34.2688, lng: -118.5557, name: 'Porter Ranch' },
      { lat: 34.4208, lng: -119.6982, name: 'Ventura County' },
      { lat: 40.5865, lng: -122.3917, name: 'Redding Area' },
      { lat: 32.7157, lng: -117.1611, name: 'San Diego County' }
    ];

    return locations.map((loc, i) => {
      const currentTime = new Date();
      const detectionTime = new Date(currentTime.getTime() - Math.random() * 3600000);

      return {
        id: `DEMO-${i}`,
        latitude: loc.lat + (Math.random() - 0.5) * 0.5,
        longitude: loc.lng + (Math.random() - 0.5) * 0.5,
        brightness: 280 + Math.random() * 100,
        confidence: 70 + Math.random() * 30,
        frp: 20 + Math.random() * 80,
        satellite: Math.random() > 0.5 ? 'VIIRS' : 'MODIS',
        acquisitionTime: detectionTime.toISOString(),
        daynight: currentTime.getHours() >= 6 && currentTime.getHours() <= 18 ? 'D' : 'N',
        type: Math.floor(Math.random() * 3),
        acq_date: detectionTime.toISOString().split('T')[0],
        acq_time: detectionTime.toTimeString().split(' ')[0]
      };
    });
  };

  // Initialize fire map with Leaflet and ALL overlays
  useEffect(() => {
    if (!fireMapRef.current) return;

    const loadLeaflet = async () => {
      // Load Leaflet CSS
      if (!document.querySelector('link[href*="leaflet.css"]')) {
        const css = document.createElement('link');
        css.rel = 'stylesheet';
        css.href = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.css';
        document.head.appendChild(css);
      }

      // Load Leaflet JS
      if (!window.L) {
        const script = document.createElement('script');
        script.src = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js';
        script.onload = () => initializeComprehensiveFireMap();
        document.head.appendChild(script);
      } else {
        initializeComprehensiveFireMap();
      }
    };

    loadLeaflet();
  }, []);

  // Initialize the comprehensive fire map
  const initializeComprehensiveFireMap = () => {
    if (!window.L || !fireMapRef.current || leafletMapRef.current) return;

    try {
      const map = window.L.map(fireMapRef.current, {
        center: [36.7783, -119.4179], // California center
        zoom: 6,
        zoomControl: true
      });

      // Add multiple base layers
      const baseLayers = {
        'Satellite': window.L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
          attribution: 'Tiles © Esri'
        }),
        'Streets': window.L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution: '© OpenStreetMap contributors'
        }),
        'Terrain': window.L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}{r}.png', {
          attribution: 'Map tiles by Stamen Design',
          subdomains: 'abcd'
        })
      };

      baseLayers['Satellite'].addTo(map);
      window.L.control.layers(baseLayers).addTo(map);

      leafletMapRef.current = map;
      console.log('🗺️ Comprehensive fire map initialized');

      // Add all overlays immediately
      addAllOperationalOverlays(map);
    } catch (err) {
      console.error('Map initialization error:', err);
    }
  };

  // Add ALL operational overlays to the map
  const addAllOperationalOverlays = (map: any) => {
    if (!window.L) return;

    console.log('🚁 Adding ALL operational overlays to map');

    // Add fire hazard zones
    addFireHazardZones(map);

    // Add WUI zones
    addWildlandUrbanInterface(map);

    // Add evacuation routes
    addEvacuationRoutes(map);

    // Add all operational markers
    addOperationalMarkers(map);
  };

  // Add Fire Hazard Severity Zones
  const addFireHazardZones = (map: any) => {
    const hazardZones = [
      { name: 'Angeles National Forest - Very High', bounds: [[34.15, -118.5], [34.35, -118.1]], severity: 'Very High' },
      { name: 'Sylmar Hills - High', bounds: [[34.25, -118.45], [34.32, -118.35]], severity: 'High' },
      { name: 'Porter Ranch - Moderate', bounds: [[34.26, -118.58], [34.28, -118.53]], severity: 'Moderate' },
      { name: 'Malibu Hills - Very High', bounds: [[34.02, -118.78], [34.08, -118.65]], severity: 'Very High' },
      { name: 'Santa Monica Mountains - High', bounds: [[34.05, -118.65], [34.12, -118.55]], severity: 'High' },
      { name: 'Verdugo Mountains - High', bounds: [[34.20, -118.28], [34.25, -118.23]], severity: 'High' }
    ];

    hazardZones.forEach(zone => {
      const colors = {
        'Very High': '#8B0000',
        'High': '#FF4500',
        'Moderate': '#FFA500',
        'Low': '#FFD700'
      };

      window.L.rectangle(zone.bounds, {
        color: colors[zone.severity as keyof typeof colors],
        fillColor: colors[zone.severity as keyof typeof colors],
        fillOpacity: 0.3,
        weight: 2
      }).addTo(map).bindPopup(`
        <strong>🔥 ${zone.name}</strong><br>
        Severity: ${zone.severity}<br>
        <em>Fire Hazard Severity Zone</em>
      `);
    });
  };

  // Add Wildland Urban Interface zones
  const addWildlandUrbanInterface = (map: any) => {
    const wuiZones = [
      { name: 'Sylmar WUI Zone', bounds: [[34.28, -118.46], [34.32, -118.42]], risk: 'High' },
      { name: 'Porter Ranch WUI Zone', bounds: [[34.26, -118.58], [34.29, -118.54]], risk: 'Moderate' },
      { name: 'Malibu WUI Zone', bounds: [[34.02, -118.78], [34.06, -118.72]], risk: 'Extreme' },
      { name: 'Altadena WUI Zone', bounds: [[34.18, -118.15], [34.20, -118.12]], risk: 'High' }
    ];

    wuiZones.forEach(zone => {
      const colors = { 'Extreme': '#8B0000', 'High': '#FF4500', 'Moderate': '#FFA500', 'Low': '#32CD32' };

      window.L.rectangle(zone.bounds, {
        color: colors[zone.risk as keyof typeof colors],
        fillColor: colors[zone.risk as keyof typeof colors],
        fillOpacity: 0.2,
        weight: 2,
        dashArray: '5, 5'
      }).addTo(map).bindPopup(`
        <strong>🏠 ${zone.name}</strong><br>
        Risk Level: ${zone.risk}<br>
        <em>Wildland Urban Interface</em>
      `);
    });
  };

  // Add evacuation routes
  const addEvacuationRoutes = (map: any) => {
    const routes = [
      { name: 'SR-14 South to I-5', path: [[34.32, -118.44], [34.28, -118.40], [34.25, -118.35]], status: 'Open' },
      { name: 'Foothill Boulevard West', path: [[34.26, -118.45], [34.26, -118.50], [34.26, -118.55]], status: 'Congested' },
      { name: 'I-210 East Emergency Route', path: [[34.22, -118.20], [34.20, -118.15], [34.18, -118.10]], status: 'Open' },
      { name: 'Pacific Coast Highway', path: [[34.03, -118.75], [34.02, -118.70], [34.01, -118.65]], status: 'Blocked' }
    ];

    routes.forEach(route => {
      const colors = { 'Open': '#32CD32', 'Congested': '#FFA500', 'Closed': '#FF4500', 'Blocked': '#8B0000' };

      window.L.polyline(route.path, {
        color: colors[route.status as keyof typeof colors],
        weight: 6,
        opacity: 0.8
      }).addTo(map).bindPopup(`
        <strong>🛣️ ${route.name}</strong><br>
        Status: ${route.status}<br>
        <em>Evacuation Route</em>
      `);
    });
  };

  // Add all operational markers
  const addOperationalMarkers = (map: any) => {
    operationalData.forEach(overlay => {
      let iconHtml = '';
      let color = '#2196F3';

      switch (overlay.type) {
        case 'helicopter_landing':
          iconHtml = '🚁'; color = overlay.status === 'threatened' ? '#FF9800' : '#4CAF50'; break;
        case 'water_source':
          iconHtml = '💧'; color = '#2196F3'; break;
        case 'emergency_service':
          iconHtml = overlay.name.includes('Fire') ? '🚒' : overlay.name.includes('Police') ? '🚔' : '🚑';
          color = '#F44336'; break;
        case 'communication_tower':
          iconHtml = '📡'; color = '#9C27B0'; break;
        case 'weather_station':
          iconHtml = '🌡️'; color = '#FF9800'; break;
        case 'fuel_analysis':
          iconHtml = '🌿'; color = '#4CAF50'; break;
        default:
          iconHtml = '📍';
      }

      const icon = window.L.divIcon({
        className: 'operational-marker',
        html: `<div style="
          width: 32px; height: 32px; background: ${color}; border-radius: 50%;
          border: 2px solid white; display: flex; align-items: center; justify-content: center;
          font-size: 16px; box-shadow: 0 2px 8px rgba(0,0,0,0.3);
          ${overlay.status === 'threatened' ? 'animation: threatPulse 1.5s ease-in-out infinite;' : ''}
        ">${iconHtml}</div>`,
        iconSize: [32, 32],
        iconAnchor: [16, 16]
      });

      window.L.marker([overlay.latitude, overlay.longitude], { icon })
        .addTo(map)
        .bindPopup(`
          <div style="min-width: 250px;">
            <h3 style="color: ${color};">${iconHtml} ${overlay.name}</h3>
            <div><strong>Type:</strong> ${overlay.type.replace('_', ' ')}</div>
            <div><strong>Priority:</strong> ${overlay.priority.toUpperCase()}</div>
            <div><strong>Status:</strong> <span style="color: ${overlay.status === 'operational' ? '#4CAF50' : '#FF9800'};">${overlay.status.toUpperCase()}</span></div>
            ${overlay.capacity ? `<div><strong>Capacity:</strong> ${overlay.capacity.toLocaleString()}</div>` : ''}
            ${overlay.details ? `<div><strong>Details:</strong> ${overlay.details}</div>` : ''}
          </div>
        `);
    });

    // Add threat animation CSS
    if (!document.querySelector('#threat-animation')) {
      const style = document.createElement('style');
      style.id = 'threat-animation';
      style.textContent = `
        @keyframes threatPulse {
          0%, 100% { opacity: 1; transform: scale(1); }
          50% { opacity: 0.6; transform: scale(1.1); }
        }
        .operational-marker { background: none !important; border: none !important; }
      `;
      document.head.appendChild(style);
    }
  };

  // Add fire markers with comprehensive data
  useEffect(() => {
    if (!leafletMapRef.current || !window.L || fireData.length === 0) return;

    const map = leafletMapRef.current;

    // Clear existing fire markers
    map.eachLayer((layer: any) => {
      if (layer.options && layer.options.className === 'fire-marker') {
        map.removeLayer(layer);
      }
    });

    // Add comprehensive fire markers
    fireData.forEach(fire => {
      const intensity = fire.frp > 80 ? 'Extreme' : fire.frp > 50 ? 'High' : fire.frp > 25 ? 'Moderate' : 'Low';
      const size = Math.max(12, Math.min(32, fire.frp / 2.5));

      const fireIcon = window.L.divIcon({
        className: 'fire-marker',
        html: `<div style="
          width: ${size}px; height: ${size}px;
          background: radial-gradient(circle, #FF4500 0%, #FF0000 70%, #8B0000 100%);
          border-radius: 50%; border: 2px solid white;
          box-shadow: 0 0 15px rgba(255, 69, 0, 0.8);
          animation: firePulse 2s ease-in-out infinite;
          display: flex; align-items: center; justify-content: center;
          color: white; font-size: ${Math.max(8, size/3)}px; font-weight: bold;
        ">🔥</div>`,
        iconSize: [size, size],
        iconAnchor: [size/2, size/2]
      });

      window.L.marker([fire.latitude, fire.longitude], { icon: fireIcon, className: 'fire-marker' })
        .addTo(map)
        .bindPopup(`
          <div style="font-family: Arial; min-width: 300px;">
            <h3 style="color: #FF4500; margin: 0 0 10px 0;">🛰️ ${fire.satellite} Fire Detection</h3>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 8px; margin-bottom: 10px;">
              <div><strong>Satellite:</strong><br>${fire.satellite}</div>
              <div><strong>Confidence:</strong><br>${fire.confidence}%</div>
              <div><strong>Fire Power:</strong><br>${fire.frp.toFixed(1)} MW</div>
              <div><strong>Brightness:</strong><br>${fire.brightness.toFixed(1)}K</div>
              <div><strong>Day/Night:</strong><br>${fire.daynight === 'D' ? 'Day' : 'Night'}</div>
              <div><strong>Intensity:</strong><br>${intensity}</div>
            </div>
            <div><strong>Location:</strong> ${fire.latitude.toFixed(4)}°, ${fire.longitude.toFixed(4)}°</div>
            <div><strong>Detection Time:</strong> ${new Date(fire.acquisitionTime).toLocaleString()}</div>
            <div style="background: rgba(255, 69, 0, 0.1); padding: 10px; border-radius: 6px; margin-top: 10px;">
              <strong style="color: #FF4500;">⚠️ LIVE SATELLITE DATA</strong><br>
              <small>Real-time fire detection from NASA FIRMS ${fire.satellite} satellite.</small>
            </div>
          </div>
        `);
    });

    // Add fire animation CSS
    if (!document.querySelector('#fire-animation')) {
      const style = document.createElement('style');
      style.id = 'fire-animation';
      style.textContent = `
        @keyframes firePulse {
          0%, 100% { opacity: 1; transform: scale(1); }
          50% { opacity: 0.7; transform: scale(1.2); }
        }
        .fire-marker { background: none !important; border: none !important; }
      `;
      document.head.appendChild(style);
    }

    // Fit bounds to show all data with proper validation
    try {
      const allCoords = [
        ...fireData.map(fire => [fire.latitude, fire.longitude]),
        ...operationalData.map(op => [op.latitude, op.longitude])
      ].filter(coord =>
        !isNaN(coord[0]) && !isNaN(coord[1]) &&
        coord[0] >= -85 && coord[0] <= 85 &&
        coord[1] >= -180 && coord[1] <= 180
      );

      if (allCoords.length > 0) {
        const bounds = window.L.latLngBounds(allCoords);
        if (bounds.isValid()) {
          map.fitBounds(bounds, { padding: [20, 20] });
        }
      }
    } catch (err) {
      console.warn('Error fitting bounds:', err);
      map.setView([36.7783, -119.4179], 6);
    }
  }, [fireData]);

  // Handle weather layer changes and update Windy iframe
  const handleWeatherLayerChange = (layerName: keyof typeof weatherLayers) => {
    setWeatherLayers(prev => {
      const newLayers = Object.keys(prev).reduce((acc, key) => {
        acc[key as keyof typeof weatherLayers] = key === layerName;
        return acc;
      }, {} as typeof weatherLayers);
      return newLayers;
    });

    // Force Windy iframe reload with new layer
    setIframeKey(prev => prev + 1);
  };

  // Generate Windy URL with current weather layer
  const generateWindyURL = () => {
    const activeLayer = Object.keys(weatherLayers).find(key => weatherLayers[key as keyof typeof weatherLayers]);
    const overlayMap: { [key: string]: string } = {
      wind: 'wind',
      temperature: 'temp',
      humidity: 'rh',
      precipitation: 'rain',
      pressure: 'pressure',
      cloudCover: 'clouds',
      lightning: 'lightning',
      cape: 'cape'
    };

    const overlay = overlayMap[activeLayer || 'wind'];

    return `https://embed.windy.com/embed2.html?lat=20&lon=0&zoom=2&level=surface&overlay=${overlay}&product=gfs&menu=&message=&marker=off&calendar=now&pressure=&type=map&location=coordinates&detail=on&metricWind=mph&metricTemp=°F&radarRange=-1&autoplay=1&numDirection=1&windLabels=1`;
  };

  // Fetch data on mount and refresh
  useEffect(() => {
    fetchNationwideFireData();
  }, []);

  useEffect(() => {
    if (lastRefresh) {
      fetchNationwideFireData();
    }
  }, [lastRefresh]);

  return (
    <Box sx={{ height: '100%', width: '100%', display: 'flex', overflow: 'hidden' }}>
      {/* LEFT MAP: Windy.com Weather (Worldwide) */}
      <Box sx={{
        width: '50%',
        height: '100%',
        borderRight: '2px solid #333',
        position: 'relative',
        overflow: 'hidden'
      }}>
        {/* Windy.com Iframe with proper loading */}
        <iframe
          src="https://embed.windy.com/embed2.html?lat=20&lon=0&zoom=2&level=surface&overlay=wind&product=gfs&menu=&message=&marker=off&calendar=now&pressure=&type=map&location=coordinates&detail=on&metricWind=mph&metricTemp=°F&radarRange=-1&autoplay=1"
          width="100%"
          height="100%"
          frameBorder="0"
          style={{ border: 'none' }}
          title="Windy Worldwide Weather Map"
          onLoad={() => setWindyLoaded(true)}
        />

        {/* Weather Controls */}
        <Box sx={{ position: 'absolute', top: 16, left: 16, zIndex: 1001 }}>
          <IconButton
            onClick={() => setShowWeatherControls(!showWeatherControls)}
            sx={{
              background: 'rgba(33, 150, 243, 0.9)',
              color: 'white',
              '&:hover': { background: 'rgba(33, 150, 243, 1)' }
            }}
          >
            {showWeatherControls ? <VisibilityOff /> : <Visibility />}
          </IconButton>
        </Box>

        <Collapse in={showWeatherControls}>
          <Card sx={{
            position: 'absolute', top: 70, left: 16, padding: 2,
            background: 'rgba(33, 150, 243, 0.95)', color: 'white',
            zIndex: 1000, maxWidth: 280
          }}>
            <Typography variant="subtitle1" sx={{ mb: 2, fontWeight: 'bold' }}>
              🌍 Global Weather Layers
            </Typography>
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
              {Object.entries(weatherLayers).map(([key, active]) => (
                <FormControlLabel
                  key={key}
                  control={
                    <Switch
                      checked={active}
                      onChange={() => handleWeatherLayerChange(key as keyof typeof weatherLayers)}
                      sx={{ '& .MuiSwitch-thumb': { backgroundColor: 'white' } }}
                    />
                  }
                  label={
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      {key === 'wind' && <Air sx={{ fontSize: 16 }} />}
                      {key === 'temperature' && <Thermostat sx={{ fontSize: 16 }} />}
                      {key === 'humidity' && <Opacity sx={{ fontSize: 16 }} />}
                      {key === 'precipitation' && <Cloud sx={{ fontSize: 16 }} />}
                      {key === 'lightning' && <FlashOn sx={{ fontSize: 16 }} />}
                      <Typography variant="body2">{key.charAt(0).toUpperCase() + key.slice(1)}</Typography>
                    </Box>
                  }
                />
              ))}
            </Box>
          </Card>
        </Collapse>

        {/* Weather Status */}
        <Box sx={{
          position: 'absolute', bottom: 16, left: 16,
          background: 'rgba(33, 150, 243, 0.9)', color: 'white',
          padding: '8px 12px', borderRadius: 2, zIndex: 1000
        }}>
          <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
            🌍 WORLDWIDE WEATHER
          </Typography>
          <Typography variant="caption" sx={{ display: 'block' }}>
            No Fire Data • Weather Only
          </Typography>
        </Box>
      </Box>

      {/* RIGHT MAP: Comprehensive Fire Data & Operational Overlays */}
      <Box sx={{
        width: '50%',
        height: '100%',
        position: 'relative',
        overflow: 'hidden'
      }}>
        {/* Fire Map Container */}
        <div
          ref={fireMapRef}
          style={{
            width: '100%',
            height: '100%',
            background: '#f5f5f5'
          }}
        />

        {/* Fire Controls */}
        <Box sx={{ position: 'absolute', top: 16, right: 16, zIndex: 1001 }}>
          <IconButton
            onClick={() => setShowFireControls(!showFireControls)}
            sx={{
              background: 'rgba(211, 47, 47, 0.9)',
              color: 'white',
              '&:hover': { background: 'rgba(211, 47, 47, 1)' }
            }}
          >
            {showFireControls ? <ExpandLess /> : <ExpandMore />}
          </IconButton>
        </Box>

        <Collapse in={showFireControls}>
          <Card sx={{
            position: 'absolute', top: 70, right: 16, padding: 2,
            background: 'rgba(211, 47, 47, 0.95)', color: 'white',
            zIndex: 1000, maxWidth: 300, maxHeight: 'calc(100vh - 120px)', overflowY: 'auto'
          }}>
            <Typography variant="subtitle1" sx={{ mb: 2, fontWeight: 'bold' }}>
              🔥 Fire & Operations Control
            </Typography>
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
              <FormControlLabel
                control={<Switch checked={true} disabled sx={{ '& .MuiSwitch-thumb': { backgroundColor: 'white' } }} />}
                label={<Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <LocalFireDepartment sx={{ fontSize: 16 }} />
                  <Typography variant="body2">🔥 Active Fire Markers ({fireData.length})</Typography>
                </Box>}
              />
              <FormControlLabel
                control={<Switch checked={true} disabled sx={{ '& .MuiSwitch-thumb': { backgroundColor: 'white' } }} />}
                label={<Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <Flight sx={{ fontSize: 16 }} />
                  <Typography variant="body2">🚁 Helicopter Landing Zones</Typography>
                </Box>}
              />
              <FormControlLabel
                control={<Switch checked={true} disabled sx={{ '& .MuiSwitch-thumb': { backgroundColor: 'white' } }} />}
                label={<Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <WaterDrop sx={{ fontSize: 16 }} />
                  <Typography variant="body2">💧 Water Sources</Typography>
                </Box>}
              />
              <FormControlLabel
                control={<Switch checked={true} disabled sx={{ '& .MuiSwitch-thumb': { backgroundColor: 'white' } }} />}
                label={<Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <LocalHospital sx={{ fontSize: 16 }} />
                  <Typography variant="body2">🏥 Emergency Services</Typography>
                </Box>}
              />
              <FormControlLabel
                control={<Switch checked={true} disabled sx={{ '& .MuiSwitch-thumb': { backgroundColor: 'white' } }} />}
                label={<Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <Radio sx={{ fontSize: 16 }} />
                  <Typography variant="body2">📡 Communication Towers</Typography>
                </Box>}
              />
              <FormControlLabel
                control={<Switch checked={true} disabled sx={{ '& .MuiSwitch-thumb': { backgroundColor: 'white' } }} />}
                label={<Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <Home sx={{ fontSize: 16 }} />
                  <Typography variant="body2">🏠 Wildland Urban Interface</Typography>
                </Box>}
              />
              <FormControlLabel
                control={<Switch checked={true} disabled sx={{ '& .MuiSwitch-thumb': { backgroundColor: 'white' } }} />}
                label={<Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <Route sx={{ fontSize: 16 }} />
                  <Typography variant="body2">🛣️ Evacuation Routes</Typography>
                </Box>}
              />
              <FormControlLabel
                control={<Switch checked={true} disabled sx={{ '& .MuiSwitch-thumb': { backgroundColor: 'white' } }} />}
                label={<Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <Science sx={{ fontSize: 16 }} />
                  <Typography variant="body2">🌿 Fuel Load Analysis</Typography>
                </Box>}
              />
              <FormControlLabel
                control={<Switch checked={true} disabled sx={{ '& .MuiSwitch-thumb': { backgroundColor: 'white' } }} />}
                label={<Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <Thermostat sx={{ fontSize: 16 }} />
                  <Typography variant="body2">🌡️ Weather Stations</Typography>
                </Box>}
              />
              <FormControlLabel
                control={<Switch checked={true} disabled sx={{ '& .MuiSwitch-thumb': { backgroundColor: 'white' } }} />}
                label={<Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <Landscape sx={{ fontSize: 16 }} />
                  <Typography variant="body2">🔥 Fire Hazard Severity Zones</Typography>
                </Box>}
              />
            </Box>
          </Card>
        </Collapse>

        {/* Fire Data Status with Comprehensive Info */}
        <Box sx={{
          position: 'absolute', bottom: 16, right: 16,
          background: 'rgba(211, 47, 47, 0.9)', color: 'white',
          padding: '8px 12px', borderRadius: 2, zIndex: 1000
        }}>
          <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
            🛰️ COMPREHENSIVE FIRE INTELLIGENCE
          </Typography>
          <Typography variant="caption" sx={{ display: 'block' }}>
            {loading ? 'Loading...' : `${fireData.length} Active Fires`}
          </Typography>
          <Typography variant="caption" sx={{ display: 'block' }}>
            {operationalData.length} Operational Assets
          </Typography>
          <Typography variant="caption" sx={{ display: 'block', fontSize: '10px' }}>
            NASA FIRMS • All Overlays Active
          </Typography>
        </Box>

        {/* Error Alert */}
        {error && (
          <Alert severity="warning" sx={{
            position: 'absolute', top: 16, left: 16,
            zIndex: 1000, maxWidth: '300px'
          }}>
            {error}
          </Alert>
        )}

        {/* Loading Indicator */}
        {loading && (
          <Box sx={{
            position: 'absolute', top: '50%', left: '50%',
            transform: 'translate(-50%, -50%)', zIndex: 1000
          }}>
            <Typography variant="body2" sx={{ textAlign: 'center', mb: 1 }}>
              Loading Fire Intelligence...
            </Typography>
          </Box>
        )}
      </Box>
    </Box>
  );
};

export default ComprehensiveSplitScreenMaps;