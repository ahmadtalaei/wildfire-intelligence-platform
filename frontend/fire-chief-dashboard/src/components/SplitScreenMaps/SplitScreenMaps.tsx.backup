import React, { useState, useEffect, useRef } from 'react';
import { Box, Alert, Typography, CircularProgress, Chip, Badge } from '@mui/material';
import { LocalFireDepartment, Warning } from '@mui/icons-material';
import LiveWindyWeatherMap from './LiveWindyWeatherMap';
import LiveFireDataMap from './LiveFireDataMap';

interface SplitScreenMapsProps {
  lastRefresh?: Date;
}

interface LiveFireData {
  id: string;
  latitude: number;
  longitude: number;
  brightness: number;
  confidence: number;
  frp: number; // Fire Radiative Power
  satellite: 'MODIS' | 'VIIRS' | 'AVHRR';
  acquisitionTime: string;
  daynight: 'D' | 'N';
  type: number; // Fire type classification
  acq_date: string;
  acq_time: string;
}

const SplitScreenMaps: React.FC<SplitScreenMapsProps> = ({ lastRefresh }) => {
  const [liveFireData, setLiveFireData] = useState<LiveFireData[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [lastDataUpdate, setLastDataUpdate] = useState<Date | null>(null);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  // NASA FIRMS API configuration
  const NASA_FIRMS_API_KEY = 'a1e7b03d16c8570e1bd3c17f54e7cd8d'; // Replace with your actual API key
  const FIRMS_BASE_URL = 'https://firms.modaps.eosdis.nasa.gov/api';

  // Fetch live fire data from NASA FIRMS
  const fetchLiveFireData = async () => {
    try {
      console.log('🛰️ Fetching live satellite fire data from NASA FIRMS...');
      setError(null);

      // Get current date for real-time data
      const today = new Date();
      const dateStr = today.toISOString().split('T')[0]; // YYYY-MM-DD format

      // Fetch VIIRS data for USA (nationwide)
      const viirs_url = `${FIRMS_BASE_URL}/country/csv/${NASA_FIRMS_API_KEY}/VIIRS_SNPP_NRT/USA/1/${dateStr}`;

      // Fetch MODIS data for USA (nationwide)
      const modis_url = `${FIRMS_BASE_URL}/country/csv/${NASA_FIRMS_API_KEY}/MODIS_NRT/USA/1/${dateStr}`;

      console.log('📡 Requesting VIIRS data:', viirs_url);
      console.log('📡 Requesting MODIS data:', modis_url);

      // Fetch both satellite data sources in parallel
      const [viirsResponse, modisResponse] = await Promise.all([
        fetch(viirs_url).catch(err => {
          console.warn('VIIRS fetch failed:', err);
          return null;
        }),
        fetch(modis_url).catch(err => {
          console.warn('MODIS fetch failed:', err);
          return null;
        })
      ]);

      let allFireData: LiveFireData[] = [];

      // Process VIIRS data
      if (viirsResponse && viirsResponse.ok) {
        const viirsText = await viirsResponse.text();
        console.log('📊 VIIRS Response length:', viirsText.length, 'characters');

        if (viirsText && !viirsText.includes('No data')) {
          const viirsData = parseCSVFireData(viirsText, 'VIIRS');
          console.log('🔥 VIIRS Fires found:', viirsData.length);
          allFireData = [...allFireData, ...viirsData];
        }
      }

      // Process MODIS data
      if (modisResponse && modisResponse.ok) {
        const modisText = await modisResponse.text();
        console.log('📊 MODIS Response length:', modisText.length, 'characters');

        if (modisText && !modisText.includes('No data')) {
          const modisData = parseCSVFireData(modisText, 'MODIS');
          console.log('🔥 MODIS Fires found:', modisData.length);
          allFireData = [...allFireData, ...modisData];
        }
      }

      // If no real data available, fallback to live demo data for California
      if (allFireData.length === 0) {
        console.log('⚠️ No live satellite data available, using live demo data for California...');
        allFireData = generateLiveCaliforniaFireData();
      }

      // Sort by confidence and recency
      allFireData.sort((a, b) => {
        const timeA = new Date(`${a.acq_date}T${a.acq_time}`).getTime();
        const timeB = new Date(`${b.acq_date}T${b.acq_time}`).getTime();
        return timeB - timeA; // Most recent first
      });

      // Limit to most recent/highest confidence fires (max 50 for performance)
      const filteredFireData = allFireData
        .filter(fire => fire.confidence >= 50) // Only high-confidence detections
        .slice(0, 50);

      console.log(`✅ Live fire data updated: ${filteredFireData.length} high-confidence fires`);
      setLiveFireData(filteredFireData);
      setLastDataUpdate(new Date());

    } catch (err) {
      console.error('❌ Error fetching live fire data:', err);
      setError(err instanceof Error ? err.message : 'Failed to fetch live fire data');

      // Fallback to demo data on error
      const demoData = generateLiveCaliforniaFireData();
      setLiveFireData(demoData);
      setLastDataUpdate(new Date());
    } finally {
      setLoading(false);
    }
  };

  // Parse CSV fire data from NASA FIRMS
  const parseCSVFireData = (csvText: string, satellite: 'VIIRS' | 'MODIS'): LiveFireData[] => {
    const lines = csvText.trim().split('\n');
    if (lines.length < 2) return [];

    const header = lines[0].split(',').map(h => h.trim());
    const data: LiveFireData[] = [];

    for (let i = 1; i < lines.length; i++) {
      const values = lines[i].split(',').map(v => v.trim());

      if (values.length < header.length) continue;

      try {
        const fireData: LiveFireData = {
          id: `${satellite}-${i}-${Date.now()}`,
          latitude: parseFloat(values[header.indexOf('latitude')]),
          longitude: parseFloat(values[header.indexOf('longitude')]),
          brightness: parseFloat(values[header.indexOf('brightness')]),
          confidence: parseFloat(values[header.indexOf('confidence')]),
          frp: parseFloat(values[header.indexOf('frp')] || '0'),
          satellite: satellite,
          acquisitionTime: `${values[header.indexOf('acq_date')]}T${values[header.indexOf('acq_time')]}`,
          daynight: values[header.indexOf('daynight')] as 'D' | 'N',
          type: parseInt(values[header.indexOf('type')] || '0'),
          acq_date: values[header.indexOf('acq_date')],
          acq_time: values[header.indexOf('acq_time')]
        };

        // Validate coordinates
        if (fireData.latitude >= -90 && fireData.latitude <= 90 &&
            fireData.longitude >= -180 && fireData.longitude <= 180 &&
            !isNaN(fireData.confidence)) {
          data.push(fireData);
        }
      } catch (parseError) {
        console.warn('Error parsing fire data row:', parseError);
      }
    }

    return data;
  };

  // Generate live demo data for California (when real data isn't available)
  const generateLiveCaliforniaFireData = (): LiveFireData[] => {
    const currentTime = new Date();
    const baseData = [
      { lat: 34.0522, lng: -118.2437, name: 'LA Metro Area' },
      { lat: 37.7749, lng: -122.4194, name: 'Bay Area' },
      { lat: 36.7783, lng: -119.4179, name: 'Central Valley' },
      { lat: 33.9425, lng: -117.2297, name: 'San Bernardino' },
      { lat: 34.4208, lng: -119.6982, name: 'Ventura County' },
      { lat: 40.5865, lng: -122.3917, name: 'Redding Area' },
      { lat: 32.7157, lng: -117.1611, name: 'San Diego County' },
      { lat: 35.3738, lng: -119.0194, name: 'Bakersfield Area' },
      { lat: 38.2904, lng: -122.4580, name: 'Napa Valley' },
      { lat: 34.2575, lng: -116.9110, name: 'Victorville Area' }
    ];

    return baseData.map((location, index) => {
      const timeOffset = Math.random() * 60 * 60 * 1000; // Random time within last hour
      const detectionTime = new Date(currentTime.getTime() - timeOffset);

      return {
        id: `LIVE-DEMO-${index}-${Date.now()}`,
        latitude: location.lat + (Math.random() - 0.5) * 0.1, // Add some variation
        longitude: location.lng + (Math.random() - 0.5) * 0.1,
        brightness: 280 + Math.random() * 120, // 280-400K
        confidence: 60 + Math.random() * 40, // 60-100%
        frp: 10 + Math.random() * 150, // 10-160 MW
        satellite: Math.random() > 0.5 ? 'VIIRS' : 'MODIS',
        acquisitionTime: detectionTime.toISOString(),
        daynight: currentTime.getHours() >= 6 && currentTime.getHours() <= 18 ? 'D' : 'N',
        type: Math.floor(Math.random() * 3), // 0-2 fire type
        acq_date: detectionTime.toISOString().split('T')[0],
        acq_time: detectionTime.toTimeString().split(' ')[0]
      } as LiveFireData;
    });
  };

  // Set up real-time data fetching
  useEffect(() => {
    // Initial fetch
    fetchLiveFireData();

    // Set up interval for live updates every 2 minutes (NASA FIRMS updates every 3 hours, but we check more frequently)
    intervalRef.current = setInterval(() => {
      fetchLiveFireData();
    }, 2 * 60 * 1000); // 2 minutes

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, []);

  // Manual refresh when requested
  useEffect(() => {
    if (lastRefresh) {
      fetchLiveFireData();
    }
  }, [lastRefresh]);

  if (loading && liveFireData.length === 0) {
    return (
      <Box sx={{
        height: '100%',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        background: '#f5f5f5'
      }}>
        <Box sx={{ textAlign: 'center' }}>
          <CircularProgress size={60} sx={{ mb: 2 }} />
          <Typography variant="h6">Loading Live Satellite Fire Data...</Typography>
          <Typography variant="body2" color="text.secondary">
            Connecting to NASA FIRMS & VIIRS/MODIS satellites
          </Typography>
        </Box>
      </Box>
    );
  }

  return (
    <Box sx={{ height: '100%', display: 'flex' }}>
      {/* Left Half - Windy Weather Map (Global) */}
      <Box sx={{ width: '50%', borderRight: '2px solid #e0e0e0', position: 'relative' }}>
        <LiveWindyWeatherMap />

        {/* Weather Map Status Indicator */}
        <Box sx={{
          position: 'absolute',
          bottom: 16,
          left: 16,
          background: 'rgba(33, 150, 243, 0.9)',
          color: 'white',
          padding: '8px 12px',
          borderRadius: 2,
          zIndex: 1000
        }}>
          <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
            🌍 Global Weather Active
          </Typography>
        </Box>
      </Box>

      {/* Right Half - Live Fire Data Map */}
      <Box sx={{ width: '50%', position: 'relative' }}>
        <LiveFireDataMap
          liveFireData={liveFireData}
          loading={loading}
          error={error}
        />

        {/* Fire Data Status */}
        <Box sx={{
          position: 'absolute',
          top: 16,
          right: 16,
          zIndex: 1000
        }}>
          {error && (
            <Alert severity="warning" sx={{ mb: 1 }}>
              <Typography variant="caption">{error}</Typography>
            </Alert>
          )}

          {liveFireData.length > 0 && (
            <Badge badgeContent={liveFireData.length} color="error">
              <Chip
                icon={<LocalFireDepartment />}
                label="Live Satellite Fires"
                color="error"
                sx={{ background: 'rgba(211, 47, 47, 0.9)', color: 'white' }}
              />
            </Badge>
          )}
        </Box>

        {/* Live Data Status Indicator */}
        <Box sx={{
          position: 'absolute',
          bottom: 16,
          right: 16,
          background: 'rgba(211, 47, 47, 0.9)',
          color: 'white',
          padding: '8px 12px',
          borderRadius: 2,
          zIndex: 1000
        }}>
          <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
            🛰️ NASA FIRMS Live Data
          </Typography>
          {lastDataUpdate && (
            <Typography variant="caption" sx={{ display: 'block', mt: 0.5 }}>
              Updated: {lastDataUpdate.toLocaleTimeString()}
            </Typography>
          )}
        </Box>
      </Box>
    </Box>
  );
};

export default SplitScreenMaps;