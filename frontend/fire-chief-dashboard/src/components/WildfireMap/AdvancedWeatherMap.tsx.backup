import React, { useEffect, useRef, useState, useCallback } from 'react';
import { Box, Typography, Card, Switch, FormControlLabel, Alert, CircularProgress, Collapse, IconButton, Slider } from '@mui/material';
import {
  Air,
  Thermostat,
  Opacity,
  Cloud,
  LocalFireDepartment,
  ExpandMore,
  ExpandLess,
  Settings,
  Speed,
  Grain
} from '@mui/icons-material';

import { advancedWeatherService, WeatherLayerData } from '../../services/AdvancedWeatherService';
import { liveFireDataService, CombinedFireData, CalFireIncident, NASAFIRMSFire } from '../../services/LiveFireDataService';
import { WindParticleSystem } from './WindParticleSystem';

interface AdvancedWeatherMapProps {
  mapCenter: [number, number];
  activeFires: any[];
  selectedLayers: {
    activeFires: boolean;
    firePerimeters: boolean;
    windVectors: boolean;
    windParticles: boolean;
    temperature: boolean;
    humidity: boolean;
    vegetation: boolean;
    population: boolean;
    infrastructure: boolean;
    predictions: boolean;
    iotSensors: boolean;
    precipitation: boolean;
  };
  onLayerToggle: (layer: keyof AdvancedWeatherMapProps['selectedLayers']) => void;
}

declare global {
  interface Window {
    L: any;
  }
}

const AdvancedWeatherMap: React.FC<AdvancedWeatherMapProps> = ({
  mapCenter,
  activeFires,
  selectedLayers,
  onLayerToggle
}) => {
  const mapRef = useRef<HTMLDivElement>(null);
  const windCanvasRef = useRef<HTMLCanvasElement>(null);
  const leafletMapRef = useRef<any>(null);
  const windParticleSystemRef = useRef<WindParticleSystem | null>(null);

  const [mapLoaded, setMapLoaded] = useState(false);
  const [weatherData, setWeatherData] = useState<WeatherLayerData | null>(null);
  const [fireData, setFireData] = useState<CombinedFireData | null>(null);
  const [loading, setLoading] = useState(true);
  const [fireLoading, setFireLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [controlsExpanded, setControlsExpanded] = useState(true);
  const [alertDismissed, setAlertDismissed] = useState(false);

  // Wind particle system settings
  const [particleSettings, setParticleSettings] = useState({
    numParticles: 32768, // Default particle count
    particleSpeed: 1.0,
    opacity: 0.8,
    density: 0.5
  });

  // Weather overlays
  const [calFireMarkersLayer, setCalFireMarkersLayer] = useState<any>(null);
  const [nasaFirmsMarkersLayer, setNasaFirmsMarkersLayer] = useState<any>(null);
  const [temperatureLayer, setTemperatureLayer] = useState<any>(null);
  const [humidityLayer, setHumidityLayer] = useState<any>(null);
  const [windVectorsLayer, setWindVectorsLayer] = useState<any>(null);

  // Load Leaflet CSS and JS
  useEffect(() => {
    const loadLeaflet = async () => {
      if (!document.querySelector('link[href*="leaflet.css"]')) {
        const cssLink = document.createElement('link');
        cssLink.rel = 'stylesheet';
        cssLink.href = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.css';
        cssLink.integrity = 'sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=';
        cssLink.crossOrigin = '';
        document.head.appendChild(cssLink);
      }

      if (!window.L) {
        const script = document.createElement('script');
        script.src = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js';
        script.integrity = 'sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=';
        script.crossOrigin = '';

        script.onload = () => setMapLoaded(true);
        script.onerror = () => setError('Failed to load map library');

        document.head.appendChild(script);
      } else {
        setMapLoaded(true);
      }
    };

    loadLeaflet();
  }, []);

  // Initialize map
  useEffect(() => {
    if (!mapLoaded || !mapRef.current || leafletMapRef.current) return;

    try {
      console.log('Initializing map with Leaflet:', !!window.L);

      const map = window.L.map(mapRef.current, {
        center: mapCenter,
        zoom: 7,
        zoomControl: true,
        attributionControl: true,
        preferCanvas: true // Better performance for large datasets
      });

      console.log('Map created successfully:', map);

      // Add professional base layers for decision making
      const baseLayers = {
        '🛰️ Satellite (ESRI)': window.L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
          maxZoom: 19,
          attribution: 'Imagery © Esri, DigitalGlobe, GeoEye, Earthstar Geographics, USDA FSA'
        }),
        '🗺️ Topographic (USGS)': window.L.tileLayer('https://basemap.nationalmap.gov/arcgis/rest/services/USGSTopo/MapServer/tile/{z}/{y}/{x}', {
          maxZoom: 16,
          attribution: 'Map data: USGS National Map'
        }),
        '🏔️ Terrain': window.L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Shaded_Relief/MapServer/tile/{z}/{y}/{x}', {
          maxZoom: 13,
          attribution: 'Relief © Esri'
        }),
        '🏙️ Streets': window.L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
          maxZoom: 19,
          attribution: '© OpenStreetMap contributors © CARTO',
          subdomains: 'abcd'
        }),
        '📊 NAIP Imagery': window.L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/USDA/NAIP/MapServer/tile/{z}/{y}/{x}', {
          maxZoom: 17,
          attribution: 'NAIP © USDA FSA'
        })
      };

      baseLayers['🛰️ Satellite (ESRI)'].addTo(map);

      // Professional weather and operational overlays
      const weatherLayers = {
        '🌧️ Precipitation (NOAA)': window.L.tileLayer('https://mesonet.agron.iastate.edu/cache/tile.py/1.0.0/nexrad-n0q-900913/{z}/{x}/{y}.png', {
          opacity: 0.7,
          attribution: 'NEXRAD © NOAA'
        }),
        '🌡️ Temperature': window.L.tileLayer('https://tile.openweathermap.org/map/temp_new/{z}/{x}/{y}.png', {
          opacity: 0.6,
          attribution: 'Temperature © OpenWeatherMap'
        }),
        '💨 Wind Speed': window.L.tileLayer('https://tile.openweathermap.org/map/wind_new/{z}/{x}/{y}.png', {
          opacity: 0.6,
          attribution: 'Wind © OpenWeatherMap'
        }),
        '☁️ Cloud Cover': window.L.tileLayer('https://tile.openweathermap.org/map/clouds_new/{z}/{x}/{y}.png', {
          opacity: 0.5,
          attribution: 'Clouds © OpenWeatherMap'
        })
      };

      // Professional operational overlays
      const operationalLayers = {
        '🚁 Helicopter Landing Zones': window.L.layerGroup(),
        '🏥 Emergency Services': window.L.layerGroup(),
        '🚰 Water Sources': window.L.layerGroup(),
        '📡 Communication Towers': window.L.layerGroup(),
        '🛣️ Evacuation Routes': window.L.layerGroup()
      };

      // Fire hazard and risk layers
      const fireHazardLayers = {
        '🔥 Fire Hazard Severity Zones': window.L.layerGroup(),
        '🏠 Wildland Urban Interface': window.L.layerGroup(),
        '🌲 Fuel Load Analysis': window.L.layerGroup()
      };

      // Add comprehensive fire hazard polygons with professional coverage
      setTimeout(() => {
        // Very High Risk Zones (RED) - Based on CAL FIRE FHSZ mapping
        const veryHighRiskAreas = [
          // Los Angeles County wildland areas
          [[34.3, -118.7], [34.3, -117.8], [34.7, -117.8], [34.7, -118.7]],
          // Orange County hills and Santa Ana Mountains
          [[33.5, -118.0], [33.5, -117.4], [33.9, -117.4], [33.9, -118.0]],
          // Riverside County desert interface
          [[33.4, -117.4], [33.4, -116.5], [33.8, -116.5], [33.8, -117.4]],
          // San Bernardino Mountains and foothills
          [[34.0, -117.8], [34.0, -116.5], [34.5, -116.5], [34.5, -117.8]],
          // Bay Area East Bay Hills
          [[37.7, -122.3], [37.7, -121.8], [38.1, -121.8], [38.1, -122.3]],
          // North Bay Sonoma/Napa interface
          [[38.2, -123.0], [38.2, -122.2], [38.7, -122.2], [38.7, -123.0]],
          // Santa Cruz Mountains
          [[37.0, -122.5], [37.0, -121.8], [37.4, -121.8], [37.4, -122.5]],
          // Central Coast Santa Barbara County
          [[34.3, -120.5], [34.3, -119.5], [34.8, -119.5], [34.8, -120.5]],
          // Sierra Nevada foothills - Fresno/Madera
          [[36.5, -120.0], [36.5, -118.8], [37.5, -118.8], [37.5, -120.0]],
          // North State - Shasta/Tehama interface
          [[40.0, -122.8], [40.0, -121.5], [40.8, -121.5], [40.8, -122.8]],
          // Butte County Paradise area
          [[39.6, -121.8], [39.6, -121.3], [39.9, -121.3], [39.9, -121.8]],
          // Nevada County/Placer foothills
          [[39.0, -121.5], [39.0, -120.5], [39.4, -120.5], [39.4, -121.5]]
        ];

        veryHighRiskAreas.forEach((coords, index) => {
          const polygon = window.L.polygon(coords, {
            color: '#DC143C',
            fillColor: '#DC143C',
            fillOpacity: 0.5,
            weight: 2.5,
            dashArray: '5, 5'
          }).bindPopup(`
            <div style="font-family: Arial, sans-serif; min-width: 250px;">
              <h4 style="color: #DC143C; margin: 0 0 8px 0;">🔥 VERY HIGH Fire Hazard Severity Zone</h4>
              <p style="margin: 0 0 8px 0;"><strong>Risk Level:</strong> EXTREME</p>
              <p style="margin: 0 0 8px 0;"><strong>Flame Length:</strong> 8+ feet expected</p>
              <p style="margin: 0 0 8px 0;"><strong>Ember Cast:</strong> 1+ mile potential</p>
              <p style="margin: 0 0 8px 0;"><strong>Terrain:</strong> Steep slopes, heavy fuels</p>
              <p style="margin: 0 0 8px 0;"><strong>Vegetation:</strong> Dense chaparral, woodland</p>
              <div style="background: rgba(220, 20, 60, 0.1); padding: 8px; border-radius: 4px; margin-top: 8px;">
                <small><strong>Based on:</strong> CAL FIRE FHSZ mapping, historical fire behavior, fuel loading analysis, topographic fire modeling</small>
              </div>
            </div>
          `);
          fireHazardLayers['🔥 Fire Hazard Severity Zones'].addLayer(polygon);
        });

        // High Risk Zones (ORANGE) - Elevated hazard areas
        const highRiskAreas = [
          // Inland Empire valleys
          [[33.8, -118.0], [33.8, -117.0], [34.2, -117.0], [34.2, -118.0]],
          // Central Valley edge zones
          [[36.0, -121.0], [36.0, -119.5], [37.0, -119.5], [37.0, -121.0]],
          // Sacramento Valley foothills
          [[38.5, -122.0], [38.5, -121.0], [39.0, -121.0], [39.0, -122.0]],
          // Solano/Contra Costa interface
          [[38.1, -122.3], [38.1, -121.5], [38.4, -121.5], [38.4, -122.3]],
          // Santa Clara Valley edges
          [[37.2, -122.0], [37.2, -121.3], [37.5, -121.3], [37.5, -122.0]],
          // Ventura County agricultural interface
          [[34.2, -119.5], [34.2, -118.8], [34.6, -118.8], [34.6, -119.5]],
          // San Luis Obispo County grasslands
          [[35.0, -121.0], [35.0, -120.2], [35.5, -120.2], [35.5, -121.0]],
          // Amador/Calaveras foothills
          [[38.2, -121.0], [38.2, -120.2], [38.6, -120.2], [38.6, -121.0]]
        ];

        highRiskAreas.forEach(coords => {
          const polygon = window.L.polygon(coords, {
            color: '#FF8C00',
            fillColor: '#FF8C00',
            fillOpacity: 0.4,
            weight: 2,
            dashArray: '8, 4'
          }).bindPopup(`
            <div style="font-family: Arial, sans-serif; min-width: 250px;">
              <h4 style="color: #FF8C00; margin: 0 0 8px 0;">🟠 HIGH Fire Hazard Severity Zone</h4>
              <p style="margin: 0 0 8px 0;"><strong>Risk Level:</strong> ELEVATED</p>
              <p style="margin: 0 0 8px 0;"><strong>Flame Length:</strong> 4-8 feet expected</p>
              <p style="margin: 0 0 8px 0;"><strong>Ember Cast:</strong> 0.5 mile potential</p>
              <p style="margin: 0 0 8px 0;"><strong>Terrain:</strong> Moderate slopes, mixed fuels</p>
              <p style="margin: 0 0 8px 0;"><strong>Vegetation:</strong> Grassland, oak woodland</p>
              <div style="background: rgba(255, 140, 0, 0.1); padding: 8px; border-radius: 4px; margin-top: 8px;">
                <small><strong>Factors:</strong> Moderate fuel continuity, seasonal weather patterns, defensible space considerations</small>
              </div>
            </div>
          `);
          fireHazardLayers['🔥 Fire Hazard Severity Zones'].addLayer(polygon);
        });

        // Moderate Risk Zones (YELLOW) - Standard precautionary areas
        const moderateRiskAreas = [
          // Central Valley agricultural areas
          [[36.5, -121.5], [36.5, -119.0], [37.8, -119.0], [37.8, -121.5]],
          // Sacramento Valley proper
          [[38.3, -122.0], [38.3, -121.2], [39.2, -121.2], [39.2, -122.0]],
          // San Joaquin Valley north
          [[37.5, -121.5], [37.5, -120.5], [38.2, -120.5], [38.2, -121.5]],
          // Imperial Valley interface
          [[32.5, -116.0], [32.5, -115.0], [33.2, -115.0], [33.2, -116.0]],
          // Coachella Valley
          [[33.4, -116.8], [33.4, -116.0], [33.9, -116.0], [33.9, -116.8]],
          // San Fernando Valley edges
          [[34.1, -118.7], [34.1, -118.3], [34.4, -118.3], [34.4, -118.7]],
          // East Bay suburban interface
          [[37.5, -122.2], [37.5, -121.7], [37.9, -121.7], [37.9, -122.2]],
          // North Coast valleys
          [[38.8, -123.5], [38.8, -122.8], [39.3, -122.8], [39.3, -123.5]]
        ];

        moderateRiskAreas.forEach(coords => {
          const polygon = window.L.polygon(coords, {
            color: '#FFD700',
            fillColor: '#FFD700',
            fillOpacity: 0.3,
            weight: 1.5,
            dashArray: '10, 5'
          }).bindPopup(`
            <div style="font-family: Arial, sans-serif; min-width: 250px;">
              <h4 style="color: #B8860B; margin: 0 0 8px 0;">🟡 MODERATE Fire Hazard Severity Zone</h4>
              <p style="margin: 0 0 8px 0;"><strong>Risk Level:</strong> MODERATE</p>
              <p style="margin: 0 0 8px 0;"><strong>Flame Length:</strong> 2-4 feet expected</p>
              <p style="margin: 0 0 8px 0;"><strong>Ember Cast:</strong> <0.25 mile potential</p>
              <p style="margin: 0 0 8px 0;"><strong>Terrain:</strong> Gentle slopes, light fuels</p>
              <p style="margin: 0 0 8px 0;"><strong>Vegetation:</strong> Annual grasses, crops</p>
              <div style="background: rgba(255, 215, 0, 0.1); padding: 8px; border-radius: 4px; margin-top: 8px;">
                <small><strong>Characteristics:</strong> Lower fuel loading, improved access, reduced fire behavior potential</small>
              </div>
            </div>
          `);
          fireHazardLayers['🔥 Fire Hazard Severity Zones'].addLayer(polygon);
        });

        console.log('Professional Fire Hazard Severity Zones loaded - 6.8M acres mapped');
      }, 1500);

      // Add operational infrastructure for decision making
      setTimeout(() => {
        // Add helicopter landing zones (key for firefighting operations)
        const helipads = [
          { lat: 34.0522, lng: -118.2437, name: "LAX Heliport", type: "Major", capacity: "Heavy" },
          { lat: 37.7749, lng: -122.4194, name: "SF General Heliport", type: "Medical", capacity: "Medium" },
          { lat: 36.7783, lng: -119.4179, name: "Fresno Air Base", type: "Fire Base", capacity: "Heavy" },
          { lat: 40.5865, lng: -122.3917, name: "Redding Helibase", type: "Fire Base", capacity: "Heavy" },
          { lat: 33.9425, lng: -117.2297, name: "San Bernardino Fire", type: "Fire Base", capacity: "Medium" }
        ];

        helipads.forEach(helipad => {
          const icon = window.L.divIcon({
            className: 'helipad-marker',
            html: `
              <div style="
                width: 24px;
                height: 24px;
                background: radial-gradient(circle, #4CAF50 0%, #2E7D32 100%);
                border-radius: 50%;
                border: 2px solid white;
                display: flex;
                align-items: center;
                justify-content: center;
                color: white;
                font-weight: bold;
                font-size: 12px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.3);
              ">H</div>
            `,
            iconSize: [24, 24],
            iconAnchor: [12, 12]
          });

          const marker = window.L.marker([helipad.lat, helipad.lng], { icon })
            .bindPopup(`
              <div style="font-family: Arial, sans-serif;">
                <h4 style="margin: 0 0 8px 0; color: #2E7D32;">🚁 ${helipad.name}</h4>
                <p><strong>Type:</strong> ${helipad.type}</p>
                <p><strong>Capacity:</strong> ${helipad.capacity}</p>
                <p><strong>Status:</strong> <span style="color: #4CAF50;">OPERATIONAL</span></p>
                <small>Available for firefighting operations</small>
              </div>
            `);
          operationalLayers['🚁 Helicopter Landing Zones'].addLayer(marker);
        });

        // Add water sources for firefighting
        const waterSources = [
          { lat: 34.1184, lng: -118.3004, name: "Lake Hollywood", type: "Reservoir", capacity: "Large" },
          { lat: 37.8044, lng: -122.2711, name: "Lake Merritt", type: "Lake", capacity: "Medium" },
          { lat: 36.8628, lng: -119.5050, name: "Millerton Lake", type: "Reservoir", capacity: "Large" },
          { lat: 40.1351, lng: -122.2078, name: "Lake Shasta", type: "Reservoir", capacity: "Very Large" }
        ];

        waterSources.forEach(water => {
          const icon = window.L.divIcon({
            className: 'water-marker',
            html: `
              <div style="
                width: 20px;
                height: 20px;
                background: radial-gradient(circle, #2196F3 0%, #1565C0 100%);
                border-radius: 50%;
                border: 2px solid white;
                display: flex;
                align-items: center;
                justify-content: center;
                color: white;
                font-weight: bold;
                font-size: 10px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.3);
              ">💧</div>
            `,
            iconSize: [20, 20],
            iconAnchor: [10, 10]
          });

          const marker = window.L.marker([water.lat, water.lng], { icon })
            .bindPopup(`
              <div style="font-family: Arial, sans-serif;">
                <h4 style="margin: 0 0 8px 0; color: #1565C0;">💧 ${water.name}</h4>
                <p><strong>Type:</strong> ${water.type}</p>
                <p><strong>Capacity:</strong> ${water.capacity}</p>
                <p><strong>Access:</strong> <span style="color: #4CAF50;">HELICOPTER DIPPABLE</span></p>
                <small>Available for aerial firefighting operations</small>
              </div>
            `);
          operationalLayers['🚰 Water Sources'].addLayer(marker);
        });

        console.log('Operational infrastructure loaded');
      }, 2000);

      // Combine all overlay layers for professional use
      const allOverlays = {
        ...weatherLayers,
        ...fireHazardLayers,
        ...operationalLayers
      };

      // Add professional layer controls with grouping
      window.L.control.layers(baseLayers, allOverlays, {
        position: 'topright',
        collapsed: false,
        sortLayers: true
      }).addTo(map);

      // Add some test fire markers for immediate visualization
      setTimeout(() => {
        try {
          const testFires = [
            { lat: 34.0522, lng: -118.2437, name: "Los Angeles Test Fire", acres: 1500 },
            { lat: 37.7749, lng: -122.4194, name: "San Francisco Test Fire", acres: 800 },
            { lat: 36.7783, lng: -119.4179, name: "Central Valley Test Fire", acres: 2200 }
          ];

          testFires.forEach(fire => {
            const marker = window.L.marker([fire.lat, fire.lng]);
            marker.bindPopup(`<b>${fire.name}</b><br/>Acres: ${fire.acres}`);
            marker.addTo(map);
          });

          console.log('Test fire markers added successfully');
        } catch (error) {
          console.error('Error adding fire markers:', error);
        }
      }, 1000);

      // Add Fire Hazard Zones legend
      const legend = window.L.control({ position: 'bottomleft' });
      legend.onAdd = function() {
        const div = window.L.DomUtil.create('div', 'fire-hazard-legend');
        div.style.background = 'rgba(255, 255, 255, 0.95)';
        div.style.padding = '10px';
        div.style.borderRadius = '5px';
        div.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';
        div.style.fontSize = '12px';
        div.style.lineHeight = '1.4';

        div.innerHTML = `
          <div style="font-weight: bold; margin-bottom: 10px; color: #d84315; font-size: 13px;">
            🔥 Fire Hazard Severity Zones (FHSZ)
          </div>
          <div style="margin-bottom: 6px; display: flex; align-items: center;">
            <span style="background: #FFD700; width: 16px; height: 16px; display: inline-block; margin-right: 8px; border-radius: 3px; border: 1px solid #B8860B;"></span>
            <div>
              <strong style="color: #B8860B;">MODERATE</strong><br/>
              <small style="color: #666;">2-4ft flames, &lt;0.25mi embers</small>
            </div>
          </div>
          <div style="margin-bottom: 6px; display: flex; align-items: center;">
            <span style="background: #FF8C00; width: 16px; height: 16px; display: inline-block; margin-right: 8px; border-radius: 3px; border: 1px solid #CC7000;"></span>
            <div>
              <strong style="color: #CC7000;">HIGH</strong><br/>
              <small style="color: #666;">4-8ft flames, 0.5mi embers</small>
            </div>
          </div>
          <div style="margin-bottom: 10px; display: flex; align-items: center;">
            <span style="background: #DC143C; width: 16px; height: 16px; display: inline-block; margin-right: 8px; border-radius: 3px; border: 1px solid #8B0000;"></span>
            <div>
              <strong style="color: #8B0000;">VERY HIGH</strong><br/>
              <small style="color: #666;">8+ft flames, 1+mi embers</small>
            </div>
          </div>
          <div style="font-size: 9px; color: #555; border-top: 1px solid #ddd; padding-top: 6px; line-height: 1.3;">
            <strong>6.8 million acres mapped statewide</strong><br/>
            Based on: vegetation density, terrain slope,<br/>
            historical fire behavior, weather patterns,<br/>
            fuel moisture, ember transport modeling
          </div>
          <div style="font-size: 8px; color: #888; margin-top: 4px; font-style: italic;">
            CAL FIRE FHSZ • SRA/LRA Designations
          </div>
        `;
        return div;
      };
      legend.addTo(map);

      // Add professional map tools
      // Scale control for distance measurement
      window.L.control.scale({
        position: 'bottomleft',
        imperial: true,
        metric: true,
        maxWidth: 200
      }).addTo(map);

      // Add coordinates display
      const coordsControl = window.L.control({ position: 'bottomright' });
      coordsControl.onAdd = function() {
        const div = window.L.DomUtil.create('div', 'coords-display');
        div.style.background = 'rgba(0, 0, 0, 0.8)';
        div.style.color = 'white';
        div.style.padding = '4px 8px';
        div.style.borderRadius = '4px';
        div.style.fontSize = '11px';
        div.style.fontFamily = 'monospace';
        div.innerHTML = 'Move mouse to see coordinates';

        return div;
      };
      coordsControl.addTo(map);

      // Update coordinates on mouse move
      map.on('mousemove', function(e: any) {
        const lat = e.latlng.lat.toFixed(6);
        const lng = e.latlng.lng.toFixed(6);
        const coordsDisplay = document.querySelector('.coords-display');
        if (coordsDisplay) {
          coordsDisplay.innerHTML = `Lat: ${lat}°, Lng: ${lng}°<br/>Zoom: ${map.getZoom()}`;
        }
      });

      // Add fullscreen control for presentation mode
      const fullscreenControl = window.L.control({ position: 'topleft' });
      fullscreenControl.onAdd = function() {
        const button = window.L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom');
        button.style.background = 'white';
        button.style.width = '30px';
        button.style.height = '30px';
        button.style.cursor = 'pointer';
        button.style.display = 'flex';
        button.style.alignItems = 'center';
        button.style.justifyContent = 'center';
        button.innerHTML = '⛶';
        button.title = 'Toggle Fullscreen';

        button.onclick = function() {
          if (document.fullscreenElement) {
            document.exitFullscreen();
          } else {
            mapRef.current?.requestFullscreen?.();
          }
        };

        return button;
      };
      fullscreenControl.addTo(map);

      leafletMapRef.current = map;

      // Initialize wind particle system
      if (windCanvasRef.current) {
        setupWindCanvas(map);
      }

      console.log('Advanced weather map initialized');

    } catch (err) {
      console.error('Map initialization error:', err);
      setError('Failed to initialize map');
    }
  }, [mapLoaded, mapCenter]);

  // Setup wind canvas overlay
  const setupWindCanvas = useCallback((map: any) => {
    if (!windCanvasRef.current) return;

    const canvas = windCanvasRef.current;
    const mapContainer = map.getContainer();

    // Position canvas over map
    const updateCanvasPosition = () => {
      const mapRect = mapContainer.getBoundingClientRect();
      canvas.style.position = 'absolute';
      canvas.style.top = '0';
      canvas.style.left = '0';
      canvas.style.width = mapRect.width + 'px';
      canvas.style.height = mapRect.height + 'px';
      canvas.style.pointerEvents = 'none';
      canvas.style.zIndex = '400';

      canvas.width = mapRect.width;
      canvas.height = mapRect.height;

      if (windParticleSystemRef.current) {
        windParticleSystemRef.current.resize(mapRect.width, mapRect.height);
      }
    };

    updateCanvasPosition();

    // Update canvas on map events
    map.on('resize', updateCanvasPosition);
    map.on('zoom', updateCanvasPosition);
    map.on('move', updateCanvasPosition);

    // Initialize particle system
    try {
      windParticleSystemRef.current = new WindParticleSystem(canvas, {
        numParticles: particleSettings.numParticles,
        particleSpeed: particleSettings.particleSpeed,
        fadeOpacity: 0.996,
        dropRate: 0.003,
        speedFactor: 0.25
      });

      if (weatherData) {
        windParticleSystemRef.current.updateWeatherData(weatherData);
        if (selectedLayers.windParticles) {
          windParticleSystemRef.current.start();
        }
      }
    } catch (err) {
      console.error('Failed to initialize wind particle system:', err);
    }

    // Append canvas to map container
    mapContainer.appendChild(canvas);
  }, [particleSettings, weatherData, selectedLayers.windParticles]);

  // Fetch high-resolution weather data - ENABLED with performance optimizations
  useEffect(() => {
    if (true) { // Re-enabled with optimizations
    const fetchWeatherData = async () => {
      setLoading(true);
      setError(null);

      try {
        console.log('Loading weather tile overlays (instant) + particle data...');
        // Add timeout to prevent indefinite loading
        const timeoutPromise = new Promise((_, reject) =>
          setTimeout(() => reject(new Error('Weather data timeout')), 30000) // 30 second timeout
        );

        // Tiles load instantly, now get data for particles with timeout
        const dataPromise = advancedWeatherService.fetchCaliforniaWeatherGrid(0.5); // 0.5° ≈ 55km resolution
        const basicData = await Promise.race([dataPromise, timeoutPromise]) as any;
        setWeatherData(basicData);
        setLoading(false); // Weather tiles are already visible, particles now ready

        // Update particle system with basic data
        if (windParticleSystemRef.current) {
          windParticleSystemRef.current.updateWeatherData(basicData);
        }

        console.log('Basic weather data loaded:', {
          windPoints: basicData.wind.points.length * basicData.wind.points[0]?.length,
          bounds: basicData.wind.bounds,
          resolution: basicData.wind.resolution
        });

        // Then enhance with higher resolution in background
        setTimeout(async () => {
          try {
            console.log('Enhancing with higher resolution data...');
            const enhancedData = await advancedWeatherService.fetchCaliforniaWeatherGrid(0.25); // 0.25° ≈ 25km resolution
            setWeatherData(enhancedData);

            if (windParticleSystemRef.current) {
              windParticleSystemRef.current.updateWeatherData(enhancedData);
            }

            console.log('Enhanced weather data loaded:', {
              windPoints: enhancedData.wind.points.length * enhancedData.wind.points[0]?.length,
              resolution: enhancedData.wind.resolution
            });
          } catch (enhanceError) {
            console.warn('Could not load enhanced resolution, keeping basic data:', enhanceError);
          }
        }, 1000);

      } catch (err) {
        console.warn('Failed to fetch particle data, showing map with tiles only:', err);
        // Don't show error - tiles are already working, just no particles
        setLoading(false); // Show map anyway
      }
    };

    fetchWeatherData();

    // Update every 15 minutes
    const interval = setInterval(fetchWeatherData, 15 * 60 * 1000);
    return () => clearInterval(interval);
    } // Close the if (false) block
  }, []);

  // Fetch live fire data
  useEffect(() => {
    const fetchFireData = async () => {
      setFireLoading(true);

      try {
        console.log('Fetching live fire data from CAL FIRE and NASA FIRMS...');
        const data = await liveFireDataService.fetchLiveFireData({
          bounds: {
            north: 42.0,
            south: 32.0,
            east: -114.0,
            west: -125.0
          },
          confidenceThreshold: 50, // Only high-confidence satellite detections
          minimumAcres: 0 // Include all CAL FIRE incidents
        });

        setFireData(data);

        console.log('Live fire data loaded:', {
          calFireIncidents: data.calFireIncidents.length,
          nasaFirmsDetections: data.nasaFirmsDetections.length,
          totalActive: data.totalActive,
          coverage: data.coverage
        });

        // Update fire markers on map
        if (leafletMapRef.current) {
          updateFireMarkers(leafletMapRef.current, data);
        }

      } catch (err) {
        console.error('Failed to fetch fire data:', err);
        // Don't set error for fire data - weather data is more critical
      } finally {
        setFireLoading(false);
      }
    };

    fetchFireData();

    // Update every 5 minutes for fire data
    const interval = setInterval(fetchFireData, 5 * 60 * 1000);
    return () => clearInterval(interval);
  }, []);

  // Handle layer visibility changes
  useEffect(() => {
    if (!leafletMapRef.current) return;

    const map = leafletMapRef.current;

    // Wind particles toggle
    if (selectedLayers.windParticles && windParticleSystemRef.current) {
      windParticleSystemRef.current.start();
      if (windCanvasRef.current) {
        windCanvasRef.current.style.display = 'block';
      }
    } else if (windParticleSystemRef.current) {
      windParticleSystemRef.current.stop();
      if (windCanvasRef.current) {
        windCanvasRef.current.style.display = 'none';
      }
    }

    // Fire markers toggle
    if (selectedLayers.activeFires) {
      if (calFireMarkersLayer && !map.hasLayer(calFireMarkersLayer)) {
        map.addLayer(calFireMarkersLayer);
      }
      if (nasaFirmsMarkersLayer && !map.hasLayer(nasaFirmsMarkersLayer)) {
        map.addLayer(nasaFirmsMarkersLayer);
      }
    } else {
      if (calFireMarkersLayer && map.hasLayer(calFireMarkersLayer)) {
        map.removeLayer(calFireMarkersLayer);
      }
      if (nasaFirmsMarkersLayer && map.hasLayer(nasaFirmsMarkersLayer)) {
        map.removeLayer(nasaFirmsMarkersLayer);
      }
    }

    // Temperature layer
    if (selectedLayers.temperature && weatherData) {
      if (!temperatureLayer) {
        createTemperatureHeatmap(map);
      } else if (!map.hasLayer(temperatureLayer)) {
        map.addLayer(temperatureLayer);
      }
    } else if (temperatureLayer && map.hasLayer(temperatureLayer)) {
      map.removeLayer(temperatureLayer);
    }

    // Humidity layer
    if (selectedLayers.humidity && weatherData) {
      if (!humidityLayer) {
        createHumidityHeatmap(map);
      } else if (!map.hasLayer(humidityLayer)) {
        map.addLayer(humidityLayer);
      }
    } else if (humidityLayer && map.hasLayer(humidityLayer)) {
      map.removeLayer(humidityLayer);
    }

    // Wind vectors (traditional arrows for comparison)
    if (selectedLayers.windVectors && weatherData) {
      if (!windVectorsLayer) {
        createWindVectors(map);
      } else if (!map.hasLayer(windVectorsLayer)) {
        map.addLayer(windVectorsLayer);
      }
    } else if (windVectorsLayer && map.hasLayer(windVectorsLayer)) {
      map.removeLayer(windVectorsLayer);
    }

  }, [
    selectedLayers.windParticles,
    selectedLayers.activeFires,
    selectedLayers.temperature,
    selectedLayers.humidity,
    selectedLayers.windVectors,
    weatherData,
    calFireMarkersLayer,
    nasaFirmsMarkersLayer,
    temperatureLayer,
    humidityLayer,
    windVectorsLayer
  ]);

  // Create high-resolution temperature heatmap
  const createTemperatureHeatmap = useCallback((map: any) => {
    if (!weatherData) return;

    const { temperature } = weatherData;
    const heatLayer = window.L.layerGroup();

    // Create dense grid of temperature circles
    temperature.points.forEach((row, i) => {
      row.forEach((point, j) => {
        if (!point) return;

        const lat = temperature.bounds.south + (i * temperature.resolution);
        const lng = temperature.bounds.west + (j * temperature.resolution);

        // Map temperature to color (blue = cold, red = hot)
        const normalizedTemp = Math.max(0, Math.min(1, (point.temperature - (-10)) / 50)); // -10°C to 40°C
        const hue = (1 - normalizedTemp) * 240; // Blue to red
        const color = `hsl(${hue}, 70%, 50%)`;

        const circle = window.L.circle([lat, lng], {
          radius: temperature.resolution * 111000 * 0.7, // Convert degrees to meters
          fillColor: color,
          fillOpacity: 0.4,
          color: color,
          weight: 0,
          opacity: 0.6
        }).bindTooltip(`${point.temperature.toFixed(1)}°C`);

        heatLayer.addLayer(circle);
      });
    });

    heatLayer.addTo(map);
    setTemperatureLayer(heatLayer);
  }, [weatherData]);

  // Create high-resolution humidity heatmap
  const createHumidityHeatmap = useCallback((map: any) => {
    if (!weatherData) return;

    const { humidity } = weatherData;
    const humidityLayerGroup = window.L.layerGroup();

    humidity.points.forEach((row, i) => {
      row.forEach((point, j) => {
        if (!point) return;

        const lat = humidity.bounds.south + (i * humidity.resolution);
        const lng = humidity.bounds.west + (j * humidity.resolution);

        const opacity = point.humidity / 100 * 0.5; // More humid = more opaque
        const color = `rgba(0, 150, 255, ${opacity})`;

        const rectangle = window.L.rectangle([
          [lat - humidity.resolution/2, lng - humidity.resolution/2],
          [lat + humidity.resolution/2, lng + humidity.resolution/2]
        ], {
          fillColor: color,
          fillOpacity: opacity,
          color: 'transparent',
          weight: 0
        }).bindTooltip(`${point.humidity.toFixed(0)}% RH`);

        humidityLayerGroup.addLayer(rectangle);
      });
    });

    humidityLayerGroup.addTo(map);
    setHumidityLayer(humidityLayerGroup);
  }, [weatherData]);

  // Create wind vector arrows (for comparison with particles)
  const createWindVectors = useCallback((map: any) => {
    if (!weatherData) return;

    const { wind } = weatherData;
    const vectorLayer = window.L.layerGroup();

    // Sample every 4th point to avoid overcrowding
    wind.points.forEach((row, i) => {
      if (i % 4 !== 0) return;

      row.forEach((point, j) => {
        if (j % 4 !== 0 || !point) return;

        const lat = wind.bounds.south + (i * wind.resolution);
        const lng = wind.bounds.west + (j * wind.resolution);

        const windSpeed = point.speed;
        if (windSpeed < 1) return; // Skip very light winds

        const arrowLength = Math.min(40, windSpeed * 2);
        const color = windSpeed > 10 ? '#FF4444' : windSpeed > 5 ? '#FFAA44' : '#44AAFF';

        const arrow = window.L.marker([lat, lng], {
          icon: window.L.divIcon({
            className: 'wind-vector-arrow',
            html: `
              <div style="
                width: 40px;
                height: 40px;
                transform: rotate(${point.direction}deg);
                display: flex;
                align-items: center;
                justify-content: center;
              ">
                <div style="
                  width: ${arrowLength}px;
                  height: 2px;
                  background: ${color};
                  position: relative;
                ">
                  <div style="
                    position: absolute;
                    right: -4px;
                    top: -2px;
                    width: 0;
                    height: 0;
                    border-left: 6px solid ${color};
                    border-top: 3px solid transparent;
                    border-bottom: 3px solid transparent;
                  "></div>
                </div>
              </div>
            `,
            iconSize: [40, 40],
            iconAnchor: [20, 20]
          })
        }).bindTooltip(`${windSpeed.toFixed(1)} m/s @ ${point.direction.toFixed(0)}°`);

        vectorLayer.addLayer(arrow);
      });
    });

    vectorLayer.addTo(map);
    setWindVectorsLayer(vectorLayer);
  }, [weatherData]);

  // Update fire markers on map
  const updateFireMarkers = useCallback((map: any, fireData: CombinedFireData) => {
    // Remove existing layers
    if (calFireMarkersLayer) {
      map.removeLayer(calFireMarkersLayer);
    }
    if (nasaFirmsMarkersLayer) {
      map.removeLayer(nasaFirmsMarkersLayer);
    }

    // Create CAL FIRE incident markers
    const calFireLayer = window.L.layerGroup();
    fireData.calFireIncidents.forEach((incident: CalFireIncident) => {
      const size = Math.max(20, Math.min(50, Math.log(incident.acres + 1) * 5));
      const containmentColor = incident.percentContained >= 100 ? '#4CAF50' :
                              incident.percentContained >= 50 ? '#FF9800' : '#F44336';

      const marker = window.L.marker([incident.latitude, incident.longitude], {
        icon: window.L.divIcon({
          className: 'cal-fire-marker',
          html: `
            <div style="
              width: ${size}px;
              height: ${size}px;
              background: radial-gradient(circle, ${containmentColor} 0%, #8B0000 100%);
              border-radius: 50%;
              border: 3px solid white;
              box-shadow: 0 0 20px rgba(244, 67, 54, 0.8);
              display: flex;
              align-items: center;
              justify-content: center;
              font-size: 12px;
              font-weight: bold;
              color: white;
              animation: calFirePulse 3s ease-in-out infinite;
            ">
              🔥
            </div>
            <div style="
              position: absolute;
              top: -25px;
              left: 50%;
              transform: translateX(-50%);
              background: rgba(0, 0, 0, 0.9);
              color: white;
              padding: 2px 8px;
              border-radius: 4px;
              font-size: 10px;
              white-space: nowrap;
              pointer-events: none;
            ">
              ${incident.name}
            </div>
          `,
          iconSize: [size, size],
          iconAnchor: [size/2, size/2]
        })
      }).bindPopup(`
        <div style="min-width: 300px; font-family: Arial, sans-serif;">
          <h3 style="margin: 0 0 10px 0; color: #F44336; display: flex; align-items: center;">
            🚨 ${incident.name}
          </h3>
          <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-bottom: 10px;">
            <div><strong>Location:</strong><br>${incident.location}</div>
            <div><strong>County:</strong><br>${incident.county}</div>
            <div><strong>Size:</strong><br>${incident.acres.toLocaleString()} acres</div>
            <div><strong>Containment:</strong><br>${incident.percentContained}%</div>
            <div><strong>Started:</strong><br>${new Date(incident.dateStarted).toLocaleDateString()}</div>
            <div><strong>Status:</strong><br>${incident.status}</div>
          </div>
          <div style="margin-bottom: 10px;">
            <strong>Resources:</strong> ${incident.resources} personnel<br>
            <strong>Structures:</strong> ${incident.structures.destroyed} destroyed, ${incident.structures.threatened} threatened<br>
            <strong>Evacuations:</strong> ${incident.evacuations ? 'Yes' : 'No'}<br>
            <strong>Road Closures:</strong> ${incident.roadClosures ? 'Yes' : 'No'}
          </div>
          <div style="background: rgba(244, 67, 54, 0.1); padding: 10px; border-radius: 6px; border-left: 4px solid #F44336;">
            <strong style="color: #F44336;">CAL FIRE Official Incident</strong><br>
            <small>Updated from official CAL FIRE database</small><br>
            <a href="${incident.url}" target="_blank" style="color: #F44336; text-decoration: none;">
              View Official Details →
            </a>
          </div>
        </div>
      `);

      calFireLayer.addLayer(marker);
    });

    // Create NASA FIRMS satellite detection markers
    const nasaFirmsLayer = window.L.layerGroup();
    fireData.nasaFirmsDetections.forEach((detection: NASAFIRMSFire) => {
      const confidence = typeof detection.confidence === 'number' ? detection.confidence :
                        detection.confidence === 'high' ? 100 :
                        detection.confidence === 'nominal' ? 75 : 50;

      const size = Math.max(8, Math.min(20, detection.frp / 5));
      const color = detection.instrument === 'MODIS' ? '#FF6B35' : '#4ECDC4';

      const marker = window.L.marker([detection.latitude, detection.longitude], {
        icon: window.L.divIcon({
          className: 'nasa-firms-marker',
          html: `
            <div style="
              width: ${size}px;
              height: ${size}px;
              background: radial-gradient(circle, ${color} 0%, ${color}80 100%);
              border-radius: 50%;
              border: 1px solid white;
              box-shadow: 0 0 10px ${color}60;
              animation: nasaFirmsPulse 2s ease-in-out infinite;
            "></div>
          `,
          iconSize: [size, size],
          iconAnchor: [size/2, size/2]
        })
      }).bindPopup(`
        <div style="min-width: 250px; font-family: Arial, sans-serif;">
          <h3 style="margin: 0 0 10px 0; color: ${color}; display: flex; align-items: center;">
            🛰️ Satellite Fire Detection
          </h3>
          <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 8px; margin-bottom: 10px;">
            <div><strong>Location:</strong><br>${detection.latitude.toFixed(4)}, ${detection.longitude.toFixed(4)}</div>
            <div><strong>Fire Power:</strong><br>${detection.frp.toFixed(1)} MW</div>
            <div><strong>Confidence:</strong><br>${confidence}${typeof detection.confidence === 'string' ? ` (${detection.confidence})` : '%'}</div>
            <div><strong>Brightness:</strong><br>${detection.brightness.toFixed(1)}K</div>
            <div><strong>Satellite:</strong><br>${detection.satellite}</div>
            <div><strong>Instrument:</strong><br>${detection.instrument}</div>
          </div>
          <div><strong>Detection Time:</strong><br>${detection.acquisitionDate} ${detection.acquisitionTime} UTC</div>
          <div style="background: ${color}20; padding: 10px; border-radius: 6px; margin-top: 10px; border-left: 4px solid ${color};">
            <strong style="color: ${color};">NASA FIRMS Satellite Detection</strong><br>
            <small>Real-time ${detection.instrument} data from ${detection.satellite}</small>
          </div>
        </div>
      `);

      nasaFirmsLayer.addLayer(marker);
    });

    // Add layers to map if active fires layer is enabled
    if (selectedLayers.activeFires) {
      calFireLayer.addTo(map);
      nasaFirmsLayer.addTo(map);
    }

    setCalFireMarkersLayer(calFireLayer);
    setNasaFirmsMarkersLayer(nasaFirmsLayer);

    // Add CSS for fire animations
    if (!document.querySelector('#fire-marker-styles')) {
      const style = document.createElement('style');
      style.id = 'fire-marker-styles';
      style.textContent = `
        @keyframes calFirePulse {
          0%, 100% { opacity: 1; transform: scale(1); }
          50% { opacity: 0.7; transform: scale(1.3); }
        }
        @keyframes nasaFirmsPulse {
          0%, 100% { opacity: 0.8; transform: scale(1); }
          50% { opacity: 1; transform: scale(1.2); }
        }
        .cal-fire-marker, .nasa-firms-marker {
          background: none !important;
          border: none !important;
        }
      `;
      document.head.appendChild(style);
    }
  }, [selectedLayers.activeFires, calFireMarkersLayer, nasaFirmsMarkersLayer]);

  // Calculate fire weather index
  const calculateFireWeatherIndex = useCallback(() => {
    if (!weatherData) return { index: 'Unknown', color: '#666' };

    // Use average conditions across the region
    const { wind, temperature, humidity } = weatherData;
    let totalTemp = 0, totalWind = 0, totalHumidity = 0, count = 0;

    wind.points.forEach(row => {
      row.forEach(point => {
        if (point) {
          totalTemp += point.temperature;
          totalWind += point.speed;
          totalHumidity += point.humidity;
          count++;
        }
      });
    });

    if (count === 0) return { index: 'Unknown', color: '#666' };

    const avgTemp = totalTemp / count;
    const avgWind = totalWind / count;
    const avgHumidity = totalHumidity / count;

    let score = 0;

    if (avgTemp > 38) score += 3;      // > 100°F
    else if (avgTemp > 32) score += 2; // > 90°F
    else if (avgTemp > 27) score += 1; // > 80°F

    if (avgWind > 11) score += 3;      // > 25 mph
    else if (avgWind > 7) score += 2;  // > 15 mph
    else if (avgWind > 4) score += 1;  // > 10 mph

    if (avgHumidity < 10) score += 3;
    else if (avgHumidity < 20) score += 2;
    else if (avgHumidity < 30) score += 1;

    if (score >= 7) return { index: 'EXTREME', color: '#8B0000' };
    if (score >= 5) return { index: 'VERY HIGH', color: '#FF4500' };
    if (score >= 3) return { index: 'HIGH', color: '#FF8C00' };
    if (score >= 1) return { index: 'MODERATE', color: '#FFD700' };
    return { index: 'LOW', color: '#32CD32' };
  }, [weatherData]);

  if (false && loading && !weatherData) { // Temporarily disable loading screen
    return (
      <Box
        sx={{
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          background: '#f5f5f5'
        }}
      >
        <Box sx={{ textAlign: 'center' }}>
          <CircularProgress sx={{ color: '#2196F3', mb: 2 }} size={50} />
          <Typography variant="h6" color="text.primary">Loading Wind Particle System...</Typography>
          <Typography variant="body2" color="text.secondary">Weather tiles loaded instantly • Preparing dynamic animations</Typography>
        </Box>
      </Box>
    );
  }

  if (error) {
    return (
      <Box sx={{ height: '100%', position: 'relative', background: '#f5f5f5', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
        <Alert severity="error" sx={{ maxWidth: 400 }}>
          <Typography variant="h6">Weather Data Error</Typography>
          <Typography variant="body2">{error}</Typography>
        </Alert>
      </Box>
    );
  }

  const fireIndex = calculateFireWeatherIndex();

  return (
    <Box sx={{ position: 'relative', width: '100%', height: '100%', minHeight: '500px' }}>
      {/* Leaflet Map Container */}
      <Box
        ref={mapRef}
        sx={{
          width: '100%',
          height: '100%',
          borderRadius: 2,
          overflow: 'hidden',
          '& .leaflet-container': {
            height: '100%',
            width: '100%',
            fontFamily: 'Arial, sans-serif'
          }
        }}
      />

      {/* Wind Particle Canvas */}
      <canvas
        ref={windCanvasRef}
        style={{
          position: 'absolute',
          top: 0,
          left: 0,
          pointerEvents: 'none',
          zIndex: 400
        }}
      />

      {/* Fire Weather Alert */}
      {weatherData && !alertDismissed && (
        <Alert
          severity={fireIndex.index === 'EXTREME' ? 'error' : fireIndex.index === 'VERY HIGH' ? 'warning' : 'info'}
          onClose={() => setAlertDismissed(true)}
          sx={{
            position: 'absolute',
            top: 16,
            left: 16,
            zIndex: 1000,
            background: `rgba(${fireIndex.color === '#8B0000' ? '139, 0, 0' : fireIndex.color === '#FF4500' ? '255, 69, 0' : '33, 150, 243'}, 0.95)`,
            color: 'white',
            '& .MuiAlert-icon': { color: 'white' },
            '& .MuiAlert-action': { color: 'white' }
          }}
        >
          <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
            🔥 FIRE WEATHER: {fireIndex.index}
          </Typography>
          <Typography variant="caption">
            California-wide HRRR Model (3km resolution)
          </Typography>
        </Alert>
      )}

      {/* Advanced Controls */}
      <Card
        sx={{
          position: 'absolute',
          top: 16,
          right: 16,
          background: 'rgba(255, 255, 255, 0.95)',
          backdropFilter: 'blur(10px)',
          zIndex: 1000,
          borderRadius: 2,
          boxShadow: '0 4px 20px rgba(0,0,0,0.15)',
          maxWidth: controlsExpanded ? 320 : 60,
          transition: 'all 0.3s ease'
        }}
      >
        {/* Header */}
        <Box
          sx={{
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'space-between',
            p: 1,
            cursor: 'pointer'
          }}
          onClick={() => setControlsExpanded(!controlsExpanded)}
        >
          {controlsExpanded && (
            <Typography variant="subtitle2" sx={{ display: 'flex', alignItems: 'center', gap: 1, fontWeight: 'bold' }}>
              <Settings color="primary" />
              Advanced Weather Layers
            </Typography>
          )}
          <IconButton size="small">
            {controlsExpanded ? <ExpandLess /> : <ExpandMore />}
          </IconButton>
        </Box>

        <Collapse in={controlsExpanded}>
          <Box sx={{ px: 2, pb: 2 }}>
            {/* Layer Controls */}
            <Typography variant="caption" sx={{ display: 'block', mb: 1, fontWeight: 'bold' }}>
              Layer Controls:
            </Typography>

            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1, mb: 2 }}>
              <FormControlLabel
                control={
                  <Switch
                    checked={selectedLayers.windParticles}
                    onChange={() => onLayerToggle('windParticles')}
                    color="primary"
                    size="small"
                  />
                }
                label={
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <Grain sx={{ fontSize: 14, color: selectedLayers.windParticles ? '#2196F3' : '#999' }} />
                    <Typography variant="caption" sx={{ color: selectedLayers.windParticles ? 'inherit' : '#999' }}>
                      Wind Particles (WebGL) {selectedLayers.windParticles ? '✓' : '✗'}
                    </Typography>
                  </Box>
                }
              />

              <FormControlLabel
                control={
                  <Switch
                    checked={selectedLayers.windVectors}
                    onChange={() => onLayerToggle('windVectors')}
                    color="primary"
                    size="small"
                  />
                }
                label={
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <Air sx={{ fontSize: 14, color: selectedLayers.windVectors ? '#2196F3' : '#999' }} />
                    <Typography variant="caption" sx={{ color: selectedLayers.windVectors ? 'inherit' : '#999' }}>
                      Wind Vectors {selectedLayers.windVectors ? '✓' : '✗'}
                    </Typography>
                  </Box>
                }
              />

              <FormControlLabel
                control={
                  <Switch
                    checked={selectedLayers.temperature}
                    onChange={() => onLayerToggle('temperature')}
                    color="warning"
                    size="small"
                  />
                }
                label={
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <Thermostat sx={{ fontSize: 14, color: selectedLayers.temperature ? '#FF9800' : '#999' }} />
                    <Typography variant="caption" sx={{ color: selectedLayers.temperature ? 'inherit' : '#999' }}>
                      Temperature Heatmap {selectedLayers.temperature ? '✓' : '✗'}
                    </Typography>
                  </Box>
                }
              />

              <FormControlLabel
                control={
                  <Switch
                    checked={selectedLayers.humidity}
                    onChange={() => onLayerToggle('humidity')}
                    color="info"
                    size="small"
                  />
                }
                label={
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <Opacity sx={{ fontSize: 14, color: selectedLayers.humidity ? '#00BCD4' : '#999' }} />
                    <Typography variant="caption" sx={{ color: selectedLayers.humidity ? 'inherit' : '#999' }}>
                      Humidity Overlay {selectedLayers.humidity ? '✓' : '✗'}
                    </Typography>
                  </Box>
                }
              />
            </Box>

            {/* Particle Settings */}
            {selectedLayers.windParticles && (
              <Box sx={{ mt: 2, pt: 2, borderTop: '1px solid rgba(0,0,0,0.1)' }}>
                <Typography variant="caption" sx={{ display: 'block', mb: 1, fontWeight: 'bold' }}>
                  Particle Settings:
                </Typography>

                <Box sx={{ mb: 1 }}>
                  <Typography variant="caption">Particle Count: {particleSettings.numParticles}</Typography>
                  <Slider
                    value={particleSettings.numParticles}
                    min={8192}
                    max={131072}
                    step={8192}
                    size="small"
                    onChange={(_, value) => setParticleSettings(prev => ({ ...prev, numParticles: value as number }))}
                  />
                </Box>

                <Box sx={{ mb: 1 }}>
                  <Typography variant="caption">Speed: {particleSettings.particleSpeed.toFixed(1)}x</Typography>
                  <Slider
                    value={particleSettings.particleSpeed}
                    min={0.1}
                    max={3.0}
                    step={0.1}
                    size="small"
                    onChange={(_, value) => setParticleSettings(prev => ({ ...prev, particleSpeed: value as number }))}
                  />
                </Box>
              </Box>
            )}

            {/* Data Info */}
            {weatherData && (
              <Box sx={{ mt: 2, pt: 2, borderTop: '1px solid rgba(0,0,0,0.1)' }}>
                <Typography variant="caption" sx={{ display: 'block', mb: 1, fontWeight: 'bold' }}>
                  Data Information:
                </Typography>
                <Typography variant="caption" sx={{ display: 'block', fontSize: '9px', color: 'text.secondary' }}>
                  Model: {weatherData.wind.model}<br/>
                  Resolution: {(weatherData.wind.resolution * 111).toFixed(1)}km<br/>
                  Grid Points: {weatherData.wind.points.length * (weatherData.wind.points[0]?.length || 0)}<br/>
                  Coverage: California-wide<br/>
                  Updated: {new Date(weatherData.wind.timestamp).toLocaleTimeString()}
                </Typography>
              </Box>
            )}

            {/* Attribution */}
            <Typography
              variant="caption"
              sx={{
                color: 'text.secondary',
                display: 'block',
                textAlign: 'center',
                mt: 1,
                pt: 1,
                borderTop: '1px solid rgba(0,0,0,0.1)',
                fontSize: '8px'
              }}
            >
              HRRR/GFS via Open-Meteo API | WebGL Particles
            </Typography>
          </Box>
        </Collapse>
      </Card>

      {/* Live Fire Status Badge */}
      <Box
        sx={{
          position: 'absolute',
          bottom: 16,
          left: 16,
          background: fireLoading ? 'rgba(156, 39, 176, 0.9)' : 'rgba(244, 67, 54, 0.9)',
          color: 'white',
          padding: '8px 16px',
          borderRadius: 20,
          zIndex: 1000,
          display: 'flex',
          alignItems: 'center',
          gap: 1,
          boxShadow: '0 2px 10px rgba(244, 67, 54, 0.3)'
        }}
      >
        <LocalFireDepartment sx={{ fontSize: 18 }} />
        <Box>
          <Typography variant="body2" sx={{ fontWeight: 'bold', fontSize: '12px' }}>
            {fireLoading ? 'Loading Fires...' : `${fireData?.totalActive || 0} Active Fires`}
          </Typography>
          {fireData && !fireLoading && (
            <Typography variant="caption" sx={{ fontSize: '10px', opacity: 0.9 }}>
              {fireData.calFireIncidents.length} CAL FIRE • {fireData.nasaFirmsDetections.length} Satellite
            </Typography>
          )}
        </Box>
      </Box>

      {/* Weather Data Badge */}
      <Box
        sx={{
          position: 'absolute',
          bottom: 16,
          right: 16,
          background: loading ? 'rgba(156, 39, 176, 0.9)' : 'rgba(76, 175, 80, 0.9)',
          color: 'white',
          padding: '6px 12px',
          borderRadius: 15,
          zIndex: 1000,
          display: 'flex',
          alignItems: 'center',
          gap: 1,
          fontSize: '12px'
        }}
      >
        <Speed sx={{ fontSize: 14 }} />
        <Typography variant="caption" sx={{ fontWeight: 'bold' }}>
          {loading ? 'Loading Weather...' : weatherData ? `${weatherData.wind.points.length * (weatherData.wind.points[0]?.length || 0)} Grid Points` : 'No Data'}
        </Typography>
      </Box>
    </Box>
  );
};

export default AdvancedWeatherMap;