import React, { useState, useEffect } from 'react';
import {
  Box,
  Paper,
  Typography,
  AppBar,
  Toolbar,
  IconButton,
  Chip,
  Badge,
  Alert,
  Grid,
  Card,
  CardContent,
  LinearProgress,
  Container
} from '@mui/material';
import {
  LocalFireDepartment,
  Refresh,
  Fullscreen,
  Public,
  Warning
} from '@mui/icons-material';
import TrueSplitScreenMaps from '../components/SplitScreenMaps/TrueSplitScreenMaps';

interface QuickStats {
  activeFires: number;
  highRiskAreas: number;
  evacuationOrders: number;
  resourcesDeployed: number;
  averageResponseTime: number;
  totalAcresBurned: number;
}

interface CriticalAlert {
  id: string;
  type: 'fire' | 'weather' | 'evacuation';
  severity: 'critical' | 'high' | 'medium';
  message: string;
  location?: string;
  timestamp: Date;
}

const SplitScreenFireChiefDashboard: React.FC = () => {
  const [loading, setLoading] = useState(false);
  const [lastRefresh, setLastRefresh] = useState<Date>(new Date());

  // Real-time stats (would come from live APIs)
  const [quickStats, setQuickStats] = useState<QuickStats>({
    activeFires: 0, // Will be updated from live satellite data
    highRiskAreas: 8,
    evacuationOrders: 3,
    resourcesDeployed: 45,
    averageResponseTime: 8.5,
    totalAcresBurned: 0 // Will be calculated from live fire data
  });

  const [criticalAlerts] = useState<CriticalAlert[]>([
    {
      id: 'alert-1',
      type: 'fire',
      severity: 'critical',
      message: 'LIVE SATELLITE DETECTION: Multiple new fires detected in Angeles National Forest area',
      location: 'Angeles National Forest',
      timestamp: new Date(Date.now() - 5 * 60 * 1000)
    },
    {
      id: 'alert-2',
      type: 'weather',
      severity: 'high',
      message: 'RED FLAG WARNING: Critical fire weather conditions - High winds (35+ mph), low humidity (<15%)',
      timestamp: new Date(Date.now() - 15 * 60 * 1000)
    }
  ]);

  // Auto-refresh dashboard data every 30 seconds
  useEffect(() => {
    const interval = setInterval(() => {
      handleRefreshData();
    }, 30000);

    return () => clearInterval(interval);
  }, []);

  const handleRefreshData = async () => {
    setLoading(true);
    console.log('üîÑ Refreshing live dashboard data...');

    try {
      // Simulate refreshing live data feeds
      await new Promise(resolve => setTimeout(resolve, 1500));

      setLastRefresh(new Date());
      console.log('‚úÖ Dashboard data refreshed successfully');
    } catch (error) {
      console.error('‚ùå Error refreshing dashboard data:', error);
    } finally {
      setLoading(false);
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'error';
      case 'high': return 'warning';
      case 'medium': return 'info';
      default: return 'default';
    }
  };

  const getAlertIcon = (type: string) => {
    switch (type) {
      case 'fire': return 'üõ∞Ô∏è';
      case 'weather': return 'üå™Ô∏è';
      case 'evacuation': return 'üö®';
      default: return '‚ö†Ô∏è';
    }
  };

  return (
    <Box sx={{ height: '100vh', display: 'flex', flexDirection: 'column', background: '#f5f5f5' }}>
      {/* Main Header */}
      <AppBar position="static" sx={{ background: 'linear-gradient(45deg, #1976d2 30%, #21cbf3 90%)' }}>
        <Toolbar>
          <LocalFireDepartment sx={{ mr: 2, fontSize: 32 }} />
          <Typography variant="h4" sx={{ flexGrow: 1, fontWeight: 'bold' }}>
            üõ∞Ô∏è Live Satellite Fire Intelligence Dashboard
          </Typography>

          {/* Quick Stats in Header */}
          <Box sx={{ display: 'flex', gap: 2, mr: 3 }}>
            <Badge badgeContent={quickStats.activeFires} color="error">
              <Chip label="Live Fires" color="secondary" size="small" />
            </Badge>
            <Badge badgeContent={quickStats.evacuationOrders} color="error">
              <Chip label="Evacuations" color="secondary" size="small" />
            </Badge>
            <Badge badgeContent={quickStats.resourcesDeployed} color="info">
              <Chip label="Resources" color="secondary" size="small" />
            </Badge>
          </Box>

          <IconButton color="inherit" onClick={handleRefreshData} disabled={loading}>
            <Refresh />
          </IconButton>
          <IconButton color="inherit">
            <Fullscreen />
          </IconButton>
        </Toolbar>
      </AppBar>

      {loading && <LinearProgress />}

      {/* Critical Alerts Bar */}
      {criticalAlerts.filter(alert => alert.severity === 'critical' || alert.severity === 'high').length > 0 && (
        <Box sx={{ background: '#ffebee', borderBottom: '1px solid #ffcdd2', p: 1 }}>
          <Container maxWidth={false}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, flexWrap: 'wrap' }}>
              <Typography variant="body2" sx={{ fontWeight: 'bold', color: '#d32f2f' }}>
                üö® LIVE ALERTS:
              </Typography>
              {criticalAlerts
                .filter(alert => alert.severity === 'critical' || alert.severity === 'high')
                .slice(0, 2)
                .map(alert => (
                  <Alert
                    key={alert.id}
                    severity={getSeverityColor(alert.severity) as any}
                    sx={{ minWidth: 0, flex: 1 }}
                  >
                    <Typography variant="caption">
                      {getAlertIcon(alert.type)} {alert.message}
                    </Typography>
                  </Alert>
                ))}
            </Box>
          </Container>
        </Box>
      )}

      {/* Quick Stats Panel */}
      <Box sx={{ background: 'white', borderBottom: '1px solid #e0e0e0', p: 2 }}>
        <Container maxWidth={false}>
          <Grid container spacing={2}>
            <Grid item xs={12} md={2}>
              <Card variant="outlined" sx={{ textAlign: 'center', p: 1 }}>
                <Typography variant="caption" color="text.secondary">üõ∞Ô∏è Live Satellite Fires</Typography>
                <Typography variant="h6" sx={{ color: '#d32f2f', fontWeight: 'bold' }}>
                  {quickStats.activeFires}
                </Typography>
                <Typography variant="caption" sx={{ fontSize: '10px', color: 'text.secondary' }}>
                  NASA FIRMS
                </Typography>
              </Card>
            </Grid>
            <Grid item xs={12} md={2}>
              <Card variant="outlined" sx={{ textAlign: 'center', p: 1 }}>
                <Typography variant="caption" color="text.secondary">High Risk Areas</Typography>
                <Typography variant="h6" sx={{ color: '#f57c00', fontWeight: 'bold' }}>
                  {quickStats.highRiskAreas}
                </Typography>
              </Card>
            </Grid>
            <Grid item xs={12} md={2}>
              <Card variant="outlined" sx={{ textAlign: 'center', p: 1 }}>
                <Typography variant="caption" color="text.secondary">Evacuation Orders</Typography>
                <Typography variant="h6" sx={{ color: '#d32f2f', fontWeight: 'bold' }}>
                  {quickStats.evacuationOrders}
                </Typography>
              </Card>
            </Grid>
            <Grid item xs={12} md={2}>
              <Card variant="outlined" sx={{ textAlign: 'center', p: 1 }}>
                <Typography variant="caption" color="text.secondary">üöÅ Resources Deployed</Typography>
                <Typography variant="h6" sx={{ color: '#1976d2', fontWeight: 'bold' }}>
                  {quickStats.resourcesDeployed}
                </Typography>
              </Card>
            </Grid>
            <Grid item xs={12} md={2}>
              <Card variant="outlined" sx={{ textAlign: 'center', p: 1 }}>
                <Typography variant="caption" color="text.secondary">Avg Response Time</Typography>
                <Typography variant="h6" sx={{ color: '#388e3c', fontWeight: 'bold' }}>
                  {quickStats.averageResponseTime}min
                </Typography>
              </Card>
            </Grid>
            <Grid item xs={12} md={2}>
              <Card variant="outlined" sx={{ textAlign: 'center', p: 1 }}>
                <Typography variant="caption" color="text.secondary">üî• Total Fire Power</Typography>
                <Typography variant="h6" sx={{ color: '#d32f2f', fontWeight: 'bold' }}>
                  {quickStats.totalAcresBurned.toLocaleString()}MW
                </Typography>
              </Card>
            </Grid>
          </Grid>
        </Container>
      </Box>

      {/* Split-Screen Maps Section - Full Screen */}
      <Box sx={{ flex: 1, display: 'flex', flexDirection: 'column' }}>
        {/* Map Headers */}
        <Box sx={{ display: 'flex', height: '60px', borderBottom: '2px solid #e0e0e0' }}>
          {/* Left Map Header - Weather */}
          <Box sx={{
            width: '50%',
            borderRight: '2px solid #e0e0e0',
            background: 'linear-gradient(135deg, #1976d2 0%, #42a5f5 100%)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center'
          }}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <Public sx={{ color: 'white', fontSize: 24 }} />
              <Typography variant="h6" sx={{ color: 'white', fontWeight: 'bold' }}>
                üåç WORLDWIDE WEATHER DATA
              </Typography>
              <Typography variant="body2" sx={{ color: 'rgba(255,255,255,0.8)' }}>
                Windy.com ‚Ä¢ No Fire Markers
              </Typography>
            </Box>
          </Box>

          {/* Right Map Header - Fire Data */}
          <Box sx={{
            width: '50%',
            background: 'linear-gradient(135deg, #d32f2f 0%, #f44336 100%)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center'
          }}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <LocalFireDepartment sx={{ color: 'white', fontSize: 24 }} />
              <Typography variant="h6" sx={{ color: 'white', fontWeight: 'bold' }}>
                üõ∞Ô∏è LIVE SATELLITE FIRE INTELLIGENCE
              </Typography>
              <Typography variant="body2" sx={{ color: 'rgba(255,255,255,0.8)' }}>
                NASA FIRMS ‚Ä¢ California Focus
              </Typography>
            </Box>
          </Box>
        </Box>

        {/* Maps Container - Full Width/Height */}
        <Box sx={{ flex: 1, minHeight: 0 }}>
          <TrueSplitScreenMaps lastRefresh={lastRefresh} />
        </Box>
      </Box>

      {/* Footer Status Bar */}
      <Box sx={{
        background: 'rgba(0,0,0,0.8)',
        color: 'white',
        p: 1,
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center'
      }}>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 3 }}>
          <Typography variant="body2">
            üïí Last Updated: {lastRefresh.toLocaleTimeString()}
          </Typography>
          <Typography variant="body2">
            üåê Windy Weather: LIVE
          </Typography>
          <Typography variant="body2">
            üõ∞Ô∏è NASA FIRMS: STREAMING
          </Typography>
          <Typography variant="body2">
            üì° Real-time Data: ACTIVE
          </Typography>
        </Box>
        <Typography variant="caption" sx={{ color: 'rgba(255,255,255,0.7)' }}>
          üî• Live Satellite Fire Intelligence Platform ‚Ä¢ NASA FIRMS + Windy.com
        </Typography>
      </Box>
    </Box>
  );
};

export default SplitScreenFireChiefDashboard;