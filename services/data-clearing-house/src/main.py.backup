"""
Data Clearing House Service
Competition Challenge 3: Data Consumption & Analytics Platform (350 points)

This service provides a comprehensive data clearing house with advanced visualization,
user management, metadata catalog, and analytics capabilities for CAL FIRE partners worldwide.
"""

from fastapi import FastAPI, HTTPException, Depends, Query, BackgroundTasks, Request, UploadFile, File
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse, JSONResponse, FileResponse
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel, Field
from typing import Dict, List, Optional, Any, Union
import asyncio
import json
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import aiohttp
import aiofiles
from pathlib import Path
import uuid
import hashlib
import geopandas as gpd
from shapely.geometry import Point, Polygon
import plotly.graph_objects as go
import plotly.express as px
from plotly.utils import PlotlyJSONEncoder
import uvicorn
import sqlite3
import io
import base64

app = FastAPI(
    title="Wildfire Intelligence - Data Clearing House",
    description="Global data clearing house for wildfire intelligence sharing across CAL FIRE partners",
    version="1.0.0"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Models
class DataRequest(BaseModel):
    requester_id: str
    organization: str
    data_type: str
    purpose: str
    date_range: Dict[str, str]
    geographic_bounds: Optional[Dict[str, float]] = None
    format_preference: str = "json"
    priority: str = "standard"  # standard, high, emergency

class DatasetMetadata(BaseModel):
    dataset_id: str
    name: str
    description: str
    data_type: str
    source: str
    geographic_coverage: str
    temporal_coverage: Dict[str, str]
    update_frequency: str
    classification: str  # public, sensitive, confidential, restricted
    access_requirements: List[str]
    file_format: str
    size_mb: float
    quality_score: float
    last_updated: datetime
    tags: List[str]
    contact_email: str

class AnalyticsQuery(BaseModel):
    query_id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    query_type: str  # aggregation, visualization, ml_inference, geospatial
    data_sources: List[str]
    parameters: Dict[str, Any]
    output_format: str = "json"
    cache_results: bool = True

class UserProfile(BaseModel):
    user_id: str
    name: str
    organization: str
    country: str
    role: str
    access_level: str
    approved_datasets: List[str]
    api_key: str
    created_at: datetime
    last_access: Optional[datetime] = None

# In-memory storage (production would use proper database)
datasets_catalog = {}
user_profiles = {}
data_requests = {}
analytics_cache = {}
usage_statistics = {
    "total_requests": 0,
    "active_users": 0,
    "datasets_shared": 0,
    "partner_countries": 0
}

# Initialize sample data
def initialize_clearing_house():
    """Initialize data clearing house with sample datasets and users"""
    
    # Sample datasets
    sample_datasets = [
        DatasetMetadata(
            dataset_id="CALFIRE_INCIDENTS_2024",
            name="CAL FIRE Incident Database 2024",
            description="Comprehensive database of wildfire incidents in California for 2024",
            data_type="fire_incidents",
            source="CAL FIRE",
            geographic_coverage="California, USA",
            temporal_coverage={"start": "2024-01-01", "end": "2024-12-31"},
            update_frequency="daily",
            classification="sensitive",
            access_requirements=["fire_agency_partnership", "data_sharing_agreement"],
            file_format="parquet",
            size_mb=45.2,
            quality_score=98.5,
            last_updated=datetime.now(),
            tags=["wildfire", "california", "incidents", "real-time"],
            contact_email="data-sharing@fire.ca.gov"
        ),
        DatasetMetadata(
            dataset_id="MODIS_FIRE_DETECTIONS",
            name="MODIS Satellite Fire Detections - Global",
            description="NASA MODIS satellite fire detection data for global wildfire monitoring",
            data_type="satellite_data",
            source="NASA FIRMS",
            geographic_coverage="Global",
            temporal_coverage={"start": "2023-01-01", "end": "2024-12-31"},
            update_frequency="near-real-time",
            classification="public",
            access_requirements=["registration"],
            file_format="geojson",
            size_mb=892.1,
            quality_score=95.2,
            last_updated=datetime.now() - timedelta(hours=1),
            tags=["satellite", "global", "fire-detection", "modis", "nasa"],
            contact_email="firms@nasa.gov"
        ),
        DatasetMetadata(
            dataset_id="WEATHER_STATION_NETWORK",
            name="California Weather Station Network",
            description="Real-time weather data from CAL FIRE weather monitoring stations",
            data_type="weather_data",
            source="CAL FIRE / NOAA",
            geographic_coverage="California, USA",
            temporal_coverage={"start": "2020-01-01", "end": "ongoing"},
            update_frequency="15-minute intervals",
            classification="public",
            access_requirements=["registration"],
            file_format="csv",
            size_mb=156.8,
            quality_score=97.1,
            last_updated=datetime.now() - timedelta(minutes=15),
            tags=["weather", "california", "real-time", "stations"],
            contact_email="weather-data@fire.ca.gov"
        ),
        DatasetMetadata(
            dataset_id="FIRE_RISK_MODELS",
            name="Advanced Fire Risk Prediction Models",
            description="Machine learning models for fire risk assessment and prediction",
            data_type="ml_models",
            source="CAL FIRE Research Division",
            geographic_coverage="California, USA",
            temporal_coverage={"start": "2024-01-01", "end": "ongoing"},
            update_frequency="monthly",
            classification="confidential",
            access_requirements=["research_partnership", "academic_collaboration"],
            file_format="pkl",
            size_mb=234.5,
            quality_score=94.8,
            last_updated=datetime.now() - timedelta(days=7),
            tags=["machine-learning", "prediction", "fire-risk", "models"],
            contact_email="research@fire.ca.gov"
        )
    ]
    
    for dataset in sample_datasets:
        datasets_catalog[dataset.dataset_id] = dataset
    
    # Sample international partners
    sample_users = [
        UserProfile(
            user_id="australian_emergency",
            name="Dr. Sarah Chen",
            organization="Australian Emergency Management",
            country="Australia",
            role="Research Director",
            access_level="elevated",
            approved_datasets=["MODIS_FIRE_DETECTIONS", "WEATHER_STATION_NETWORK"],
            api_key="AUS_" + str(uuid.uuid4())[:8],
            created_at=datetime.now() - timedelta(days=45)
        ),
        UserProfile(
            user_id="european_forest",
            name="Prof. Marco Rossi",
            organization="European Forest Fire Information System",
            country="Italy",
            role="Senior Analyst",
            access_level="elevated",
            approved_datasets=["MODIS_FIRE_DETECTIONS", "CALFIRE_INCIDENTS_2024"],
            api_key="EU_" + str(uuid.uuid4())[:8],
            created_at=datetime.now() - timedelta(days=32)
        ),
        UserProfile(
            user_id="canadian_forestry",
            name="Dr. Michelle Dubois",
            organization="Natural Resources Canada",
            country="Canada",
            role="Fire Research Scientist",
            access_level="partner",
            approved_datasets=["MODIS_FIRE_DETECTIONS", "WEATHER_STATION_NETWORK", "FIRE_RISK_MODELS"],
            api_key="CAN_" + str(uuid.uuid4())[:8],
            created_at=datetime.now() - timedelta(days=78)
        )
    ]
    
    for user in sample_users:
        user_profiles[user.user_id] = user
    
    # Update usage statistics
    usage_statistics["datasets_shared"] = len(datasets_catalog)
    usage_statistics["active_users"] = len(user_profiles)
    usage_statistics["partner_countries"] = len(set(user.country for user in user_profiles.values()))

@app.on_event("startup")
async def startup_event():
    """Initialize data clearing house on startup"""
    initialize_clearing_house()

@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "service": "data-clearing-house",
        "version": "1.0.0",
        "datasets_available": len(datasets_catalog),
        "registered_partners": len(user_profiles),
        "countries_served": len(set(user.country for user in user_profiles.values())),
        "total_data_requests": len(data_requests)
    }

@app.get("/", response_class=HTMLResponse)
async def clearing_house_portal():
    """Main data clearing house portal"""
    return """
<!DOCTYPE html>
<html>
<head>
    <title>Global Wildfire Intelligence Data Clearing House</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <style>
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            margin: 0; 
            padding: 20px; 
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white;
        }
        .portal-header {
            text-align: center;
            background: rgba(255, 255, 255, 0.1);
            padding: 40px;
            border-radius: 15px;
            margin-bottom: 30px;
            backdrop-filter: blur(10px);
        }
        .portal-title {
            font-size: 3em;
            margin: 0;
            background: linear-gradient(45deg, #ff6b6b, #feca57, #48ca7e, #0abde3);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        .features-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }
        .feature-card {
            background: rgba(255, 255, 255, 0.15);
            border-radius: 15px;
            padding: 30px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: transform 0.3s ease;
        }
        .feature-card:hover {
            transform: translateY(-5px);
        }
        .feature-icon {
            font-size: 3em;
            margin-bottom: 15px;
        }
        .feature-title {
            font-size: 1.5em;
            font-weight: bold;
            margin-bottom: 10px;
            color: #feca57;
        }
        .stats-bar {
            display: flex;
            justify-content: space-around;
            background: rgba(0, 0, 0, 0.2);
            padding: 20px;
            border-radius: 15px;
            margin: 30px 0;
        }
        .stat-item {
            text-align: center;
        }
        .stat-number {
            font-size: 2.5em;
            font-weight: bold;
            color: #48ca7e;
        }
        .stat-label {
            font-size: 0.9em;
            opacity: 0.8;
        }
        .portal-nav {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin: 30px 0;
        }
        .nav-button {
            background: linear-gradient(45deg, #ff6b6b, #feca57);
            color: white;
            padding: 15px 30px;
            border: none;
            border-radius: 25px;
            font-size: 1.1em;
            font-weight: bold;
            cursor: pointer;
            text-decoration: none;
            transition: all 0.3s ease;
        }
        .nav-button:hover {
            transform: scale(1.05);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }
        .dataset-preview {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 30px;
            margin: 30px 0;
        }
        .dataset-card {
            background: rgba(0, 0, 0, 0.2);
            border-radius: 10px;
            padding: 20px;
            margin: 15px 0;
            border-left: 4px solid #48ca7e;
        }
    </style>
</head>
<body>
    <div class="portal-header">
        <h1 class="portal-title">🌍 Global Wildfire Intelligence</h1>
        <h2>Data Clearing House</h2>
        <p style="font-size: 1.2em; margin: 20px 0;">
            Secure data sharing platform for international wildfire intelligence collaboration
        </p>
        <p>Supporting CAL FIRE partners across the globe with real-time data access and analytics</p>
    </div>

    <div class="stats-bar">
        <div class="stat-item">
            <div class="stat-number" id="datasets-count">4</div>
            <div class="stat-label">Datasets Available</div>
        </div>
        <div class="stat-item">
            <div class="stat-number" id="partners-count">3</div>
            <div class="stat-label">Partner Agencies</div>
        </div>
        <div class="stat-item">
            <div class="stat-number" id="countries-count">4</div>
            <div class="stat-label">Countries Served</div>
        </div>
        <div class="stat-item">
            <div class="stat-number" id="data-shared">1.3TB</div>
            <div class="stat-label">Data Shared</div>
        </div>
    </div>

    <div class="portal-nav">
        <a href="/catalog" class="nav-button">📊 Data Catalog</a>
        <a href="/analytics" class="nav-button">🔬 Analytics Portal</a>
        <a href="/visualization" class="nav-button">🗺️ Visualization Studio</a>
        <a href="/api/docs" class="nav-button">📚 API Documentation</a>
    </div>

    <div class="features-grid">
        <div class="feature-card">
            <div class="feature-icon">🛰️</div>
            <div class="feature-title">Real-Time Satellite Data</div>
            <p>Access to NASA MODIS/VIIRS fire detection data with global coverage and near real-time updates for immediate response.</p>
        </div>
        <div class="feature-card">
            <div class="feature-icon">🤖</div>
            <div class="feature-title">ML-Powered Analytics</div>
            <p>Advanced machine learning models for fire risk prediction, behavior analysis, and resource optimization.</p>
        </div>
        <div class="feature-card">
            <div class="feature-icon">🔒</div>
            <div class="feature-title">Secure Data Sharing</div>
            <p>Enterprise-grade security with role-based access control, encryption, and comprehensive audit trails.</p>
        </div>
        <div class="feature-card">
            <div class="feature-icon">🌐</div>
            <div class="feature-title">Global Partnerships</div>
            <p>Collaborative platform connecting fire agencies across Australia, Europe, Canada, and beyond.</p>
        </div>
        <div class="feature-card">
            <div class="feature-icon">⚡</div>
            <div class="feature-title">High-Performance APIs</div>
            <p>RESTful APIs with sub-second response times, bulk data operations, and flexible query capabilities.</p>
        </div>
        <div class="feature-card">
            <div class="feature-icon">📈</div>
            <div class="feature-title">Interactive Dashboards</div>
            <p>Custom visualization tools with geospatial mapping, time-series analysis, and real-time monitoring.</p>
        </div>
    </div>

    <div class="dataset-preview">
        <h3>🔥 Featured Datasets</h3>
        <div class="dataset-card">
            <strong>CAL FIRE Incident Database 2024</strong><br>
            <small>Comprehensive wildfire incidents • 45.2 MB • Updated daily • Sensitive access</small>
        </div>
        <div class="dataset-card">
            <strong>Global MODIS Fire Detections</strong><br>
            <small>NASA satellite data • 892.1 MB • Real-time • Public access</small>
        </div>
        <div class="dataset-card">
            <strong>Advanced Fire Risk Models</strong><br>
            <small>ML prediction models • 234.5 MB • Updated monthly • Research partnership required</small>
        </div>
    </div>

    <script>
        // Animation for statistics
        function animateNumber(elementId, finalNumber, suffix = '') {
            const element = document.getElementById(elementId);
            const increment = finalNumber / 50;
            let current = 0;
            
            const timer = setInterval(() => {
                current += increment;
                if (current >= finalNumber) {
                    element.textContent = finalNumber + suffix;
                    clearInterval(timer);
                } else {
                    element.textContent = Math.floor(current) + suffix;
                }
            }, 50);
        }

        // Animate statistics on load
        window.onload = function() {
            animateNumber('datasets-count', 4);
            animateNumber('partners-count', 3);
            animateNumber('countries-count', 4);
        };
    </script>
</body>
</html>
    """

@app.get("/catalog", response_class=HTMLResponse)
async def data_catalog():
    """Interactive data catalog with search and filtering"""
    return """
<!DOCTYPE html>
<html>
<head>
    <title>Data Catalog - Wildfire Intelligence Clearing House</title>
    <style>
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            margin: 0; 
            padding: 20px; 
            background: #f8fafc;
        }
        .catalog-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
            text-align: center;
        }
        .search-filters {
            background: white;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            display: flex;
            gap: 20px;
            align-items: center;
        }
        .filter-input {
            flex: 1;
            padding: 12px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            font-size: 1em;
        }
        .filter-select {
            padding: 12px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            background: white;
        }
        .datasets-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 20px;
        }
        .dataset-card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            border-left: 5px solid #667eea;
            transition: transform 0.2s ease;
        }
        .dataset-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }
        .dataset-title {
            font-size: 1.3em;
            font-weight: bold;
            color: #2d3748;
            margin-bottom: 10px;
        }
        .dataset-meta {
            display: flex;
            justify-content: space-between;
            margin: 15px 0;
            font-size: 0.9em;
            color: #718096;
        }
        .dataset-tags {
            margin: 15px 0;
        }
        .tag {
            display: inline-block;
            background: #e2e8f0;
            color: #4a5568;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.8em;
            margin: 2px;
        }
        .access-level {
            padding: 6px 12px;
            border-radius: 15px;
            font-size: 0.8em;
            font-weight: bold;
        }
        .public { background: #c6f6d5; color: #22543d; }
        .sensitive { background: #fed7d7; color: #742a2a; }
        .confidential { background: #fbb6ce; color: #702459; }
        .quality-bar {
            width: 100%;
            height: 6px;
            background: #e2e8f0;
            border-radius: 3px;
            margin: 10px 0;
        }
        .quality-fill {
            height: 100%;
            background: linear-gradient(90deg, #48bb78, #38a169);
            border-radius: 3px;
        }
        .dataset-actions {
            margin-top: 20px;
            display: flex;
            gap: 10px;
        }
        .action-btn {
            padding: 8px 16px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9em;
            font-weight: bold;
        }
        .btn-primary { background: #667eea; color: white; }
        .btn-secondary { background: #e2e8f0; color: #4a5568; }
    </style>
</head>
<body>
    <div class="catalog-header">
        <h1>📊 Global Data Catalog</h1>
        <p>Discover and access wildfire intelligence datasets from international partners</p>
    </div>

    <div class="search-filters">
        <input type="text" class="filter-input" placeholder="Search datasets..." id="search-input">
        <select class="filter-select" id="type-filter">
            <option value="">All Data Types</option>
            <option value="fire_incidents">Fire Incidents</option>
            <option value="satellite_data">Satellite Data</option>
            <option value="weather_data">Weather Data</option>
            <option value="ml_models">ML Models</option>
        </select>
        <select class="filter-select" id="access-filter">
            <option value="">All Access Levels</option>
            <option value="public">Public</option>
            <option value="sensitive">Sensitive</option>
            <option value="confidential">Confidential</option>
        </select>
    </div>

    <div class="datasets-grid" id="datasets-container">
        <!-- Datasets will be loaded here -->
    </div>

    <script>
        async function loadDatasets() {
            try {
                const response = await fetch('/api/catalog/datasets');
                const data = await response.json();
                displayDatasets(data.datasets);
            } catch (error) {
                console.error('Failed to load datasets:', error);
            }
        }

        function displayDatasets(datasets) {
            const container = document.getElementById('datasets-container');
            container.innerHTML = datasets.map(dataset => `
                <div class="dataset-card">
                    <div class="dataset-title">${dataset.name}</div>
                    <p>${dataset.description}</p>
                    <div class="dataset-meta">
                        <span><strong>Source:</strong> ${dataset.source}</span>
                        <span><strong>Size:</strong> ${dataset.size_mb} MB</span>
                        <span><strong>Format:</strong> ${dataset.file_format.toUpperCase()}</span>
                    </div>
                    <div class="dataset-meta">
                        <span><strong>Coverage:</strong> ${dataset.geographic_coverage}</span>
                        <span><strong>Updated:</strong> ${dataset.update_frequency}</span>
                    </div>
                    <div class="access-level ${dataset.classification}">
                        ${dataset.classification.toUpperCase()}
                    </div>
                    <div class="quality-bar">
                        <div class="quality-fill" style="width: ${dataset.quality_score}%"></div>
                    </div>
                    <div style="font-size: 0.9em; color: #718096;">
                        Quality Score: ${dataset.quality_score}%
                    </div>
                    <div class="dataset-tags">
                        ${dataset.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
                    </div>
                    <div class="dataset-actions">
                        <button class="action-btn btn-primary" onclick="requestAccess('${dataset.dataset_id}')">
                            Request Access
                        </button>
                        <button class="action-btn btn-secondary" onclick="viewMetadata('${dataset.dataset_id}')">
                            View Details
                        </button>
                    </div>
                </div>
            `).join('');
        }

        function requestAccess(datasetId) {
            alert(`Access request submitted for dataset: ${datasetId}`);
        }

        function viewMetadata(datasetId) {
            window.open(`/api/catalog/datasets/${datasetId}/metadata`, '_blank');
        }

        // Load datasets on page load
        loadDatasets();
    </script>
</body>
</html>
    """

@app.get("/api/catalog/datasets")
async def get_catalog_datasets(
    data_type: Optional[str] = None,
    classification: Optional[str] = None,
    search: Optional[str] = None
):
    """Get datasets from catalog with filtering"""
    filtered_datasets = list(datasets_catalog.values())
    
    if data_type:
        filtered_datasets = [d for d in filtered_datasets if d.data_type == data_type]
    
    if classification:
        filtered_datasets = [d for d in filtered_datasets if d.classification == classification]
    
    if search:
        search_lower = search.lower()
        filtered_datasets = [d for d in filtered_datasets 
                           if search_lower in d.name.lower() or 
                              search_lower in d.description.lower() or
                              any(search_lower in tag.lower() for tag in d.tags)]
    
    return {
        "datasets": filtered_datasets,
        "total_count": len(filtered_datasets),
        "filters_applied": {
            "data_type": data_type,
            "classification": classification,
            "search": search
        }
    }

@app.post("/api/data/request")
async def submit_data_request(request: DataRequest, background_tasks: BackgroundTasks):
    """Submit data access request"""
    request_id = str(uuid.uuid4())
    
    # Store request
    data_requests[request_id] = {
        "request_id": request_id,
        "submitted_at": datetime.now(),
        "status": "pending_review",
        **request.dict()
    }
    
    # Schedule background processing
    background_tasks.add_task(process_data_request, request_id)
    
    return {
        "request_id": request_id,
        "status": "submitted",
        "estimated_processing_time": "2-5 business days",
        "message": "Your data request has been submitted for review"
    }

@app.get("/analytics", response_class=HTMLResponse)
async def analytics_portal():
    """Advanced analytics portal with interactive visualizations"""
    return """
<!DOCTYPE html>
<html>
<head>
    <title>Analytics Portal - Wildfire Intelligence</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <style>
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            margin: 0; 
            padding: 20px; 
            background: #1a202c;
            color: white;
        }
        .analytics-header {
            background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
            text-align: center;
        }
        .analytics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
            gap: 20px;
        }
        .chart-container {
            background: #2d3748;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
        }
        .chart-title {
            font-size: 1.3em;
            font-weight: bold;
            margin-bottom: 15px;
            color: #f7fafc;
        }
        .controls-panel {
            background: #2d3748;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
        }
        .control-group {
            display: flex;
            gap: 15px;
            margin: 10px 0;
            align-items: center;
        }
        .control-label {
            min-width: 100px;
            font-weight: bold;
        }
        .control-input {
            padding: 8px 12px;
            border: 1px solid #4a5568;
            border-radius: 6px;
            background: #1a202c;
            color: white;
        }
        .analyze-btn {
            background: linear-gradient(45deg, #ff6b6b, #ee5a24);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 1em;
            font-weight: bold;
            cursor: pointer;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="analytics-header">
        <h1>🔬 Advanced Analytics Portal</h1>
        <p>Interactive data analysis and visualization for wildfire intelligence</p>
    </div>

    <div class="controls-panel">
        <h3>📊 Analysis Controls</h3>
        <div class="control-group">
            <label class="control-label">Dataset:</label>
            <select class="control-input" id="dataset-select">
                <option value="CALFIRE_INCIDENTS_2024">CAL FIRE Incidents 2024</option>
                <option value="MODIS_FIRE_DETECTIONS">MODIS Fire Detections</option>
                <option value="WEATHER_STATION_NETWORK">Weather Station Network</option>
            </select>
        </div>
        <div class="control-group">
            <label class="control-label">Date Range:</label>
            <input type="date" class="control-input" id="start-date" value="2024-01-01">
            <input type="date" class="control-input" id="end-date" value="2024-12-31">
        </div>
        <div class="control-group">
            <label class="control-label">Analysis Type:</label>
            <select class="control-input" id="analysis-type">
                <option value="temporal">Temporal Analysis</option>
                <option value="geospatial">Geospatial Analysis</option>
                <option value="risk_assessment">Risk Assessment</option>
                <option value="correlation">Correlation Analysis</option>
            </select>
        </div>
        <button class="analyze-btn" onclick="runAnalysis()">🚀 Run Analysis</button>
    </div>

    <div class="analytics-grid">
        <div class="chart-container">
            <div class="chart-title">🔥 Fire Activity Trends</div>
            <div id="fire-trends-chart" style="height: 400px;"></div>
        </div>
        <div class="chart-container">
            <div class="chart-title">🗺️ Geographic Distribution</div>
            <div id="geo-distribution-chart" style="height: 400px;"></div>
        </div>
        <div class="chart-container">
            <div class="chart-title">📈 Risk Assessment Model</div>
            <div id="risk-model-chart" style="height: 400px;"></div>
        </div>
        <div class="chart-container">
            <div class="chart-title">🌡️ Weather Correlation</div>
            <div id="weather-correlation-chart" style="height: 400px;"></div>
        </div>
    </div>

    <script>
        // Initialize charts
        function initializeCharts() {
            // Fire trends chart
            const fireData = {
                x: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                y: [45, 52, 67, 89, 134, 187, 234, 198, 156, 98, 67, 43],
                type: 'scatter',
                mode: 'lines+markers',
                line: {color: '#ff6b6b', width: 3},
                marker: {size: 8, color: '#ee5a24'}
            };
            Plotly.newPlot('fire-trends-chart', [fireData], {
                paper_bgcolor: 'rgba(0,0,0,0)',
                plot_bgcolor: 'rgba(0,0,0,0)',
                font: {color: 'white'},
                xaxis: {gridcolor: '#4a5568'},
                yaxis: {gridcolor: '#4a5568', title: 'Fire Incidents'}
            });

            // Geographic distribution
            const geoData = {
                lat: [37.7749, 34.0522, 38.5816, 32.7157],
                lon: [-122.4194, -118.2437, -121.4944, -117.1611],
                mode: 'markers+text',
                type: 'scattergeo',
                marker: {
                    size: [30, 45, 25, 35],
                    color: ['#ff6b6b', '#ee5a24', '#ff9ff3', '#54a0ff'],
                    line: {color: 'white', width: 2}
                },
                text: ['San Francisco', 'Los Angeles', 'Sacramento', 'San Diego']
            };
            Plotly.newPlot('geo-distribution-chart', [geoData], {
                geo: {
                    scope: 'usa',
                    projection: {type: 'albers usa'},
                    showland: true,
                    landcolor: '#2d3748',
                    showocean: true,
                    oceancolor: '#1a202c'
                },
                paper_bgcolor: 'rgba(0,0,0,0)',
                font: {color: 'white'}
            });

            // Risk assessment model
            const riskData = {
                values: [35, 25, 20, 20],
                labels: ['Low Risk', 'Moderate Risk', 'High Risk', 'Extreme Risk'],
                type: 'pie',
                marker: {
                    colors: ['#48bb78', '#ed8936', '#ee5a24', '#ff6b6b']
                }
            };
            Plotly.newPlot('risk-model-chart', [riskData], {
                paper_bgcolor: 'rgba(0,0,0,0)',
                font: {color: 'white'}
            });

            // Weather correlation
            const tempData = {
                x: [65, 72, 68, 75, 82, 89, 95, 92, 87, 79, 71, 66],
                y: [12, 18, 24, 35, 48, 67, 89, 76, 54, 32, 21, 14],
                mode: 'markers',
                type: 'scatter',
                marker: {
                    size: 10,
                    color: '#54a0ff',
                    line: {color: 'white', width: 1}
                }
            };
            Plotly.newPlot('weather-correlation-chart', [tempData], {
                paper_bgcolor: 'rgba(0,0,0,0)',
                plot_bgcolor: 'rgba(0,0,0,0)',
                font: {color: 'white'},
                xaxis: {gridcolor: '#4a5568', title: 'Temperature (°F)'},
                yaxis: {gridcolor: '#4a5568', title: 'Fire Incidents'}
            });
        }

        function runAnalysis() {
            alert('Running advanced analysis... Results will be displayed shortly.');
            // In a real implementation, this would trigger API calls to generate new visualizations
        }

        // Initialize on page load
        window.onload = initializeCharts;
    </script>
</body>
</html>
    """

async def process_data_request(request_id: str):
    """Background task to process data requests"""
    await asyncio.sleep(5)  # Simulate processing time
    
    if request_id in data_requests:
        data_requests[request_id]["status"] = "approved"
        data_requests[request_id]["processed_at"] = datetime.now()

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8006)